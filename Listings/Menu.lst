C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MENU
OBJECT MODULE PLACED IN .\Objects\Menu.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\Menu.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include;.\FreeModBu
                    -s\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\Menu.lst) OBJECT(.\Objects\Menu.obj)

line level    source

   1          #include "Menu.h"
   2          
   3          /*当前UI界面和显示控件*/
   4          Current_UI Ui_Status = {MAIN_STATE, CONTROL_SCREENSAVE};
   5          
   6          OPTION Optionlist[] =
   7              {
   8                  {"启停开关", CONTROL_PLCPOWER, PlcPowerUIshow},
   9                  {"通信方式", CONTROL_COMMUNICA, CommunicaUIshow},
  10                  {"工作模式",CONTROL_WORKMODE, WorkModeUIshow},
  11                  {"密码修改", CONTROL_PASSWORD_CHANGE, PassWordChangeUIShow},
  12                  {"波特率设置", CONTROL_BAUDSETTING, Baud_Setting},
  13                  {"本机热点", CONTROL_HOTSPOT, HotspotSettingUIshow},
  14                  {"恢复出厂设置", CONTROL_RELOAD, ReloadSettingUIshow},
  15          };
  16          
  17          #define OptionlistSize (sizeof(Optionlist) / sizeof(OPTION))
  18          
  19          /*二级菜单*/
  20          OPTION Optionlist1[] =
  21              {
  22                  {"以太网", CONTROL_BAUD1, BaudSettingUI1show},
  23                  {"无线网", CONTROL_BAUD2, BaudSettingUI2show},
  24                  {"扩展网", CONTROL_BAUD3, BaudSettingUI3show},
  25                  {"内部网", CONTROL_BAUD4, BaudSettingUI4show}};
  26          
  27          #define OptionlistSize1 (sizeof(Optionlist1) / sizeof(OPTION))
  28          
  29          /*当前多级菜单数量*/
  30          Menu_Show M_Show[] =
  31              {
  32                  {0, 0, 0, {0, 1, 2}, Optionlist},
  33                  {0, 0, 0, {0, 1, 2}, Optionlist1}
  34          
  35          };
  36          
  37          #define MENU_NUM (sizeof(M_Show) / sizeof(Menu_Show))
  38          
  39          /*函数映射表*/
  40          const KEY_MAP keyStateEvent[] =
  41              {
  42                  /*Main状态*/
  43                  {KEY_UP, MAIN_STATE, KeyMain_Up},
  44                  {KEY_DOWN, MAIN_STATE, KeyMain_Down},
  45                  {KEY_ENTER, MAIN_STATE, KeyMain_Enter},
  46                  {KEY_CANCEL, MAIN_STATE, KeyMain_Cancel},
  47                  {KEY_MENU, MAIN_STATE, KeyMain_Menu},
  48                  /*Menu状态*/
  49                  {KEY_UP, MENU_STATE, KeyMenu_Up},
  50                  {KEY_DOWN, MENU_STATE, KeyMenu_Down},
  51                  {KEY_ENTER, MENU_STATE, KeyMenu_Enter},
  52                  {KEY_CANCEL, MENU_STATE, KeyMenu_Cancel},
  53                  {KEY_MENU, MENU_STATE, KeyMenu_Menu},
  54                  /*CONTROL状态*/
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 2   

  55                  {KEY_UP, CONTROL_STATE, KeyControl_Up},
  56                  {KEY_DOWN, CONTROL_STATE, KeyControl_Down},
  57                  {KEY_ENTER, CONTROL_STATE, KeyControl_Enter},
  58                  {KEY_CANCEL, CONTROL_STATE, KeyControl_Cancel},
  59                  {KEY_MENU, CONTROL_STATE, KeyControl_Menu},
  60                  /*BAUD状态*/
  61                  {KEY_UP, BAUD_STATE, KeyBaud_Up},
  62                  {KEY_DOWN, BAUD_STATE, KeyBaud_Down},
  63                  {KEY_ENTER, BAUD_STATE, KeyBaud_Enter},
  64                  {KEY_CANCEL, BAUD_STATE, KeyBaud_Cancel},
  65                  {KEY_MENU, BAUD_STATE, KeyBaud_Menu}};
  66          
  67          #define keyStateEventSize (sizeof(keyStateEvent) / sizeof(KEY_MAP))
  68          
  69          void KeyEvent(void) //按键事件
  70          {
  71   1          uint8_t i;
  72   1          KEY_e KeyState = Key_Chick(); //获取按键状态
  73   1      
  74   1          LcdDly(KeyState); // 无按键操作返回函数
  75   1      
  76   1          if (KeyState == NO_KEY) //无按键直接返回
  77   1          {
  78   2              return;
  79   2          }
  80   1      
  81   1          for (i = 0; i < keyStateEventSize; i++)
  82   1          {
  83   2              if (KeyState == keyStateEvent[i].Keycodel) //按键值
  84   2              {   /*按键状态*/
  85   3                  if (Ui_Status.Ui == keyStateEvent[i].Stage)
  86   3                  {
  87   4                      keyStateEvent[i].fun(); //执行按键状态对应函数
  88   4                      break;
  89   4                  }
  90   3              }
  91   2          }
  92   1      }
  93          
  94          void LcdShowInit(void) //界面显示初始化
  95          {
  96   1          LcdShow(&ScreensaverUiShow);
  97   1      }
  98          
  99          /*界面显示接口(回调函数思想)*/
 100          void LcdShow(pshow InterfaceShow) 
 101          {
 102   1          InterfaceShow();
 103   1      }
 104          
 105          /**
 106           * @brief       主界面状态--enter
 107           * @details     在主界面下按下enter按钮
 108           * @param       None
 109           * @retval      None
 110           */
 111          void KeyMain_Enter(void)
 112          {
 113   1      #if USE_PRINTF_DEBUG
                  uint8_t temp = strncmp(System_Parameter.PSWNext.PassWordbuff, "\xFF\xFF\xFF\xFF", PASSWORDBITS);
              #endif
 116   1          if (Ui_Status.Widget == CONTROL_PASSWORD)
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 3   

 117   1          {
 118   2              /*没有设置过密码或者密码正确*/
 119   2              if (PassWordjudge(PassWordI, System_Parameter) || (!strncmp(System_Parameter.PSWNext.PassWordbuff,
             - "\xFF\xFF\xFF\xFF", PASSWORDBITS)))
 120   2              {
 121   3                  LcdShow(RefreshMenuDisp); //刷新界面
 122   3                  Ui_Status.Ui = MENU_STATE;
 123   3                  // PublicTimer16.MenuDly16.Timer16Count = T_60S; //无操作返回定时器开启
 124   3              }
 125   2              else //如果密码错误
 126   2              {
 127   3                  PassWordDelete(&PassWordI);
 128   3                  clear_screen();
 129   3                  GUI_String(49, 31, "wrong password !", EN_5_8);
 130   3                  Delay_ms(1000);
 131   3                  // /*控件选项为屏保*/
 132   3                  // Ui_Status.Widget = CONTROL_SCREENSAVE;
 133   3                  LcdShow(PassWordInputUIShow); //重新输入
 134   3              }
 135   2          }
 136   1      
 137   1      #if USE_PRINTF_DEBUG
                  Uartx_SendStr(&Uart1, System_Parameter.PSWNext.PassWordbuff, 4);
                  Uartx_SendStr(&Uart1, &temp, 1);
                  printf("KeyMain_Enter\r\n");
              #endif
 142   1      }
 143          
 144          void KeyMain_Up(void) //主界面状态--Up
 145          {
 146   1          if (Ui_Status.Widget == CONTROL_PASSWORD) //密码控件
 147   1          {
 148   2              uint8_t Value = PassWordInput(ADD, &PassWordI);
 149   2              uint8_t temp[2] = {0}; //字符
 150   2              GUI_String(PassWordI.PSWNext.Index * 20 + 97, 38, myitoa(Value, temp, 10), EN_5_8);
 151   2          }
 152   1      
 153   1      #if USE_PRINTF_DEBUG
                  printf("KeyMain_Up\r\n");
              #endif
 156   1      }
 157          /*屏保界面到密码输入界面切换*/
 158          void KeyMain_Menu(void) //主界面状态--Menu
 159          {
 160   1          switch (Ui_Status.Widget)
 161   1          {
 162   2          case CONTROL_SCREENSAVE:
 163   2          {
 164   3              /*切换到密码界面*/
 165   3              Ui_Status.Widget = CONTROL_PASSWORD;
 166   3              LcdShow(&PassWordInputUIShow);
 167   3              /*无操作返回定时器开启*/
 168   3              PublicTimer16.MenuDly16.Timer16Count = T_60S;
 169   3          }
 170   2          break;
 171   2          case CONTROL_PASSWORD:
 172   2          { /*改变当前密码输入位置*/
 173   3              InputOffect(&PassWordI);
 174   3          }
 175   2          break;
 176   2          default:
 177   2              break;
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 4   

 178   2          }
 179   1      
 180   1      #if USE_PRINTF_DEBUG
                  printf("KeyMain_Menu\r\n");
              #endif
 183   1      }
 184          
 185          void KeyMain_Cancel(void) //主界面状态--Cancel
 186          {
 187   1          /*主界面按下取消键，退到屏保界面*/
 188   1          if (Ui_Status.Widget == CONTROL_PASSWORD)
 189   1          {
 190   2              LcdShow(&ScreensaverUiShow);
 191   2              Ui_Status.Widget = CONTROL_SCREENSAVE;
 192   2              PassWordDelete(&PassWordI);
 193   2          }
 194   1      
 195   1      #if USE_PRINTF_DEBUG
                  printf("%s\r\n", System_Parameter.PSWNext.PassWordbuff); //防止忘记密码之后进不去PLC
              #endif
 198   1      }
 199          
 200          void KeyMain_Down(void) //主界面状态--Down
 201          {
 202   1          if (Ui_Status.Widget == CONTROL_PASSWORD)
 203   1          {
 204   2              uint8_t Value = PassWordInput(SUB, &PassWordI);
 205   2              uint8_t temp[2] = {0}; //字符
 206   2              GUI_String(PassWordI.PSWNext.Index * 20 + 97, 38, myitoa(Value, temp, 10), EN_5_8);
 207   2          }
 208   1      
 209   1      #if USE_PRINTF_DEBUG
                  printf("KeyMain_Down\r\n");
              #endif
 212   1      }
 213          
 214          void KeyMenu_Enter(void) //菜单状态--Enter
 215          {
 216   1          if (M_Show[MAIN_MENU].OptionNow->ControlShow == NULL)
 217   1          {
 218   2              return;
 219   2          }
 220   1      
 221   1          Ui_Status.Ui = CONTROL_STATE;
 222   1          Ui_Status.Widget = M_Show[MAIN_MENU].OptionNow->ControlType; //赋值控件
 223   1          LcdShow(M_Show[MAIN_MENU].OptionNow->ControlShow);      //显示控制界面
 224   1      #if USE_PRINTF_DEBUG
                  printf("KeyMenu_Enter\r\n");
              #endif
 227   1      }
 228          
 229          /*菜单状态--Up*/
 230          void KeyMenu_Up(void)
 231          {
 232   1          /*箭头索引减小*/
 233   1          if ((M_Show[MAIN_MENU].Finger_Index--) == 0)
 234   1              M_Show[MAIN_MENU].Finger_Index = 0;
 235   1      
 236   1          M_Show[MAIN_MENU].Option_Index = LoopIndex(UPWORD, M_Show[MAIN_MENU].Option_Index, OptionlistSize);
 237   1      
 238   1          if (M_Show[MAIN_MENU].Option_Index == (OptionlistSize - 1)) //索引逻辑
 239   1          {
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 5   

 240   2              M_Show[MAIN_MENU].Finger_Index = 2;
 241   2          }
 242   1          /*菜单滑动逻辑*/
 243   1          if (M_Show[MAIN_MENU].Finger_Index == 0)
 244   1          {
 245   2              M_Show[MAIN_MENU].OptionIndex_buf[0] = M_Show[MAIN_MENU].Option_Index;
 246   2              M_Show[MAIN_MENU].OptionIndex_buf[1] = M_Show[MAIN_MENU].Option_Index + 1;
 247   2              M_Show[MAIN_MENU].OptionIndex_buf[2] = M_Show[MAIN_MENU].Option_Index + 2;
 248   2          }
 249   1          else if (M_Show[MAIN_MENU].Finger_Index == 1)
 250   1          {
 251   2              M_Show[MAIN_MENU].OptionIndex_buf[0] = M_Show[MAIN_MENU].Option_Index - 1;
 252   2              M_Show[MAIN_MENU].OptionIndex_buf[1] = M_Show[MAIN_MENU].Option_Index;
 253   2              M_Show[MAIN_MENU].OptionIndex_buf[2] = M_Show[MAIN_MENU].Option_Index + 1;
 254   2          }
 255   1          else
 256   1          {
 257   2              M_Show[MAIN_MENU].OptionIndex_buf[0] = M_Show[MAIN_MENU].Option_Index - 2;
 258   2              M_Show[MAIN_MENU].OptionIndex_buf[1] = M_Show[MAIN_MENU].Option_Index - 1;
 259   2              M_Show[MAIN_MENU].OptionIndex_buf[2] = M_Show[MAIN_MENU].Option_Index;
 260   2          }
 261   1      
 262   1          LcdShow(RefreshMenuDisp);                                                  //刷新显示
 263   1          M_Show[MAIN_MENU].OptionNow = &Optionlist[M_Show[MAIN_MENU].Option_Index]; //赋值当前选项
 264   1      #if USE_PRINTF_DEBUG
                  printf("KeyMenu_Up\r\n");
              #endif
 267   1      }
 268          
 269          /*菜单状态--Menu*/
 270          void KeyMenu_Menu(void)
 271          {
 272   1      #if USE_PRINTF_DEBUG
                  printf("KeyMenu_Menu\r\n");
              #endif
 275   1      }
 276          
 277          void KeyMenu_Cancel(void) //菜单状态--Cancel
 278          {
 279   1          /*菜单界面按下取消键，直接锁屏*/
 280   1          Ui_Status.Ui = MAIN_STATE;
 281   1          Ui_Status.Widget = CONTROL_SCREENSAVE;
 282   1          LcdShow(&ScreensaverUiShow);
 283   1          PassWordDelete(&PassWordI);
 284   1      
 285   1      #if USE_PRINTF_DEBUG
                  printf("KeyMenu_Cancel\r\n");
              #endif
 288   1      }
 289          
 290          void KeyMenu_Down(void) //菜单状态--Down
 291          {
 292   1          if ((M_Show[MAIN_MENU].Finger_Index++) == 2) //箭头索引增加
 293   1              M_Show[MAIN_MENU].Finger_Index = 2;
 294   1      
 295   1          M_Show[MAIN_MENU].Option_Index = LoopIndex(DOWMWORD, M_Show[MAIN_MENU].Option_Index, OptionlistSize); 
             -//选项索引
 296   1      
 297   1          if (M_Show[MAIN_MENU].Option_Index == 0) //索引逻辑
 298   1          {
 299   2              M_Show[MAIN_MENU].Finger_Index = 0;
 300   2          }
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 6   

 301   1      
 302   1          if (M_Show[MAIN_MENU].Finger_Index == 0)
 303   1          {
 304   2              M_Show[MAIN_MENU].OptionIndex_buf[0] = M_Show[MAIN_MENU].Option_Index;
 305   2              M_Show[MAIN_MENU].OptionIndex_buf[1] = M_Show[MAIN_MENU].Option_Index + 1;
 306   2              M_Show[MAIN_MENU].OptionIndex_buf[2] = M_Show[MAIN_MENU].Option_Index + 2;
 307   2          }
 308   1          else if (M_Show[MAIN_MENU].Finger_Index == 1)
 309   1          {
 310   2              M_Show[MAIN_MENU].OptionIndex_buf[0] = M_Show[MAIN_MENU].Option_Index - 1;
 311   2              M_Show[MAIN_MENU].OptionIndex_buf[1] = M_Show[MAIN_MENU].Option_Index;
 312   2              M_Show[MAIN_MENU].OptionIndex_buf[2] = M_Show[MAIN_MENU].Option_Index + 1;
 313   2          }
 314   1          else
 315   1          {
 316   2              M_Show[MAIN_MENU].OptionIndex_buf[0] = M_Show[MAIN_MENU].Option_Index - 2;
 317   2              M_Show[MAIN_MENU].OptionIndex_buf[1] = M_Show[MAIN_MENU].Option_Index - 1;
 318   2              M_Show[MAIN_MENU].OptionIndex_buf[2] = M_Show[MAIN_MENU].Option_Index;
 319   2          }
 320   1      
 321   1          LcdShow(RefreshMenuDisp);                                                  //刷新显示
 322   1          M_Show[MAIN_MENU].OptionNow = &Optionlist[M_Show[MAIN_MENU].Option_Index]; //赋值当前选项
 323   1      
 324   1      #if USE_PRINTF_DEBUG
                  printf("KeyMenu_Down\r\n");
              #endif
 327   1      }
 328          
 329          /**
 330           * @brief       检查密码输入位数是否达标
 331           * @details     
 332           * @param       counts 当前密码输入次数
 333           * @return      true/false
 334           */
 335          uint8_t Check_PasswordBits(void)
 336          {
 337   1          /*密码位数不够，禁止修改*/
 338   1          if (!System_Parameter.PSWNext.Bit_Efficient_Flag)
 339   1          {
 340   2              clear_screen();
 341   2              if(!System_Parameter.PSWNext.First_Input_Flag)
 342   2              {
 343   3                  GUI_String(5, 20, "Invalid password!", EN_5_8);
 344   3                  GUI_String(5, 32, "Current counts is 1.", EN_5_8);
 345   3                  /*修改密码1清空 */
 346   3                  PassWordDelete(&PassWordChange1);
 347   3              }
 348   2              else
 349   2              {
 350   3                  GUI_String(5, 20, "Invalid password!", EN_5_8);
 351   3                  GUI_String(5, 32, "Current counts is 2.", EN_5_8);
 352   3                  /*修改密码2清空 */
 353   3                  PassWordDelete(&PassWordChange2);
 354   3              }
 355   2              Delay_ms(1000);
 356   2              /*显示修改密码界面*/
 357   2              LcdShow(PassWordChangeUIShow);
 358   2         
 359   2              return false;
 360   2          }
 361   1          return true;
 362   1      }
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 7   

 363          
 364          void KeyControl_Enter(void) //控件状态--Enter
 365          {
 366   1          switch (Ui_Status.Widget)
 367   1          {
 368   2          case CONTROL_PASSWORD_CHANGE:
 369   2          {
 370   3              if (!Check_PasswordBits())
 371   3                  return;
 372   3              /*如果是第一次输入修改密码*/
 373   3              if (!System_Parameter.PSWNext.First_Input_Flag)
 374   3              {
 375   4                  uint8_t i;
 376   4                  uint8_t temp[2];
 377   4      
 378   4                  for (i = 0; i < PASSWORDBITS; i++) //显示4位密码
 379   4                  {
 380   5                      GUI_String(i * 20 + 100, 18, myitoa(PassWordChange1.PSWNext.PassWordbuff[i], temp, 10), EN
             -_5_8);
 381   5                  }
 382   4      
 383   4                  GUI_Lattice(175, 16, 16, 12, dot);
 384   4                  /*置标志位*/
 385   4                  System_Parameter.PSWNext.First_Input_Flag = true;
 386   4              }
 387   3              else
 388   3              {
 389   4                  if (PassWordjudge(PassWordChange1, PassWordChange2)) //密码判断两次输入相同密码时修改成功
 390   4                  {
 391   5                      memcpy(&System_Parameter.PSWNext.PassWordbuff, &PassWordChange2.PSWNext.PassWordbuff, size
             -of(PassWordChange2.PSWNext.PassWordbuff));
 392   5                      ControlSave();
 393   5                      PassWordDelete(&PassWordChange1); //修改密码1清0
 394   5                      PassWordDelete(&PassWordChange2); //修改密码2清0
 395   5                      /*返回菜单界面*/
 396   5                      Ui_Status.Ui = MENU_STATE;
 397   5      
 398   5                      clear_screen();
 399   5                      GUI_String(70, 22, "修改成功", CH_12_12); //显示修改结果
 400   5                      Delay_ms(500);
 401   5                      LcdShow(RefreshMenuDisp); //刷新显示
 402   5                  }
 403   4                  else //两次密码输入不一致时
 404   4                  {
 405   5      
 406   5                      clear_screen();
 407   5                      GUI_String(70, 22, "修改失败", CH_12_12); //显示修改结果
 408   5                      Delay_ms(500);
 409   5                      LcdShow(PassWordChangeUIShow); //修改密码
 410   5                  }
 411   4                  /*置标志位*/
 412   4                  System_Parameter.PSWNext.First_Input_Flag = false;
 413   4              }
 414   3              /*清除密码有效标志*/
 415   3              System_Parameter.PSWNext.Bit_Efficient_Flag = false;
 416   3              break;
 417   3          }
 418   2      
 419   2          case CONTROL_PLCPOWER:
 420   2          {
 421   3              System_Parameter.PlcState ^= 1;
 422   3              RUNKEY = System_Parameter.PlcState;
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 8   

 423   3              ControlSave();           //存盘开关量
 424   3              LcdShow(PlcPowerUIshow); // PLC设置界面
 425   3              break;
 426   3          }
 427   2      
 428   2          case CONTROL_COMMUNICA:
 429   2          {
 430   3              if (System_Parameter.CommunicationType == LOCAL)
 431   3              {
 432   4                  Wifi_Enable(false);
 433   4              }
 434   3              else
 435   3              {
 436   4                  Wifi_Enable(true);
 437   4                  clear_screen();
 438   4                  GUI_String(30, 22, "Please wait a moment", EN_5_8);
 439   4                  Delay_ms(500);
 440   4                  // /*初始化WIIF模块*/
 441   4                  // Wifi_Init();
 442   4              }
 443   3              ControlSave(); //存盘通信方式
 444   3      
 445   3              clear_screen();
 446   3              GUI_String(70, 22, "修改成功", CH_12_12); //显示修改结果
 447   3              Delay_ms(500);
 448   3              // LcdShow(CommunicaUIshow); //通讯设置界面
 449   3              /*返回菜单界面*/
 450   3              Ui_Status.Ui = MENU_STATE;
 451   3              LcdShow(RefreshMenuDisp); //刷新显示
 452   3              break;
 453   3          }
 454   2      
 455   2          case CONTROL_BAUDSETTING:
 456   2          {
 457   3              if (M_Show[SEC0_MENU].OptionNow->ControlShow == NULL)
 458   3              {
 459   4                  return;
 460   4              }
 461   3              /*切换到波特率设置界面*/
 462   3              Ui_Status.Ui = BAUD_STATE;
 463   3              /*赋值控件*/
 464   3              Ui_Status.Widget = M_Show[SEC0_MENU].OptionNow->ControlType;
 465   3              /*显示控制界面*/
 466   3              LcdShow(M_Show[SEC0_MENU].OptionNow->ControlShow);
 467   3              /*无操作返回定时器开启*/
 468   3              // PublicTimer16.MenuDly16.Timer16Count = T_60S;
 469   3          }
 470   2          break;
 471   2          /*本机热点设置*/
 472   2          case CONTROL_HOTSPOT:
 473   2          {   /*检查函数指针非空*/
 474   3              if(Aplist[System_Parameter.Apstate].fun != NULL)
 475   3              {
 476   4                  /*执行对应的功能函数*/
 477   4                  Aplist[System_Parameter.Apstate].fun(); 
 478   4              }
 479   3              ControlSave(); //存盘热点设置
 480   3              clear_screen();
 481   3              GUI_String(70, 22, "修改成功", CH_12_12); //显示修改结果
 482   3              Delay_ms(500);
 483   3              /*返回菜单界面*/
 484   3              Ui_Status.Ui = MENU_STATE;
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 9   

 485   3              LcdShow(RefreshMenuDisp); //刷新显示
 486   3          }break;
 487   2          /*工作模式选择*/
 488   2          case CONTROL_WORKMODE:
 489   2          {
 490   3              /*检查函数指针非空*/
 491   3              if(Modelist[System_Parameter.WorkMode].fun != NULL)
 492   3              {
 493   4                  /*执行对应的功能函数*/
 494   4                  Modelist[System_Parameter.WorkMode].fun(); 
 495   4              }
 496   3              ControlSave(); //存盘工作模式设置
 497   3              clear_screen();
 498   3              GUI_String(70, 22, "修改成功", CH_12_12); //显示修改结果
 499   3              Delay_ms(500);
 500   3              /*返回菜单界面*/
 501   3              Ui_Status.Ui = MENU_STATE;
 502   3              LcdShow(RefreshMenuDisp); //刷新显示
 503   3          }break;
 504   2          /*恢复出厂设置*/
 505   2          case CONTROL_RELOAD:
 506   2          {
 507   3              CLOSE_GLOBAL_OUTAGE();
 508   3              IapErase(START_SAVEADDRESS); //擦除密码区
 509   3                                           /*把默认参数拷贝到当前数据结构*/
 510   3              memcpy(&System_Parameter.PSWNext.PassWordbuff[0], DEFAULT_SYSTEM_PARAMETER, (sizeof(System_Paramet
             -er) - 1U));
 511   3              /*把数据进行存储*/
 512   3              IapWrite_Buff(START_SAVEADDRESS, &System_Parameter.PSWNext.PassWordbuff[0], (sizeof(System_Paramet
             -er) - 1U)); //使密码界面失效
 513   3              OPEN_GLOBAL_OUTAGE();
 514   3      
 515   3              BaudInit();
 516   3              PowerInit();
 517   3              CommunicaInit();
 518   3              Wifi_Init();
 519   3      
 520   3              clear_screen();
 521   3              GUI_String(70, 22, "修改成功", CH_12_12); //显示修改结果
 522   3              Delay_ms(500);
 523   3              /*返回菜单界面*/
 524   3              Ui_Status.Ui = MENU_STATE;
 525   3              LcdShow(RefreshMenuDisp); //刷新显示
 526   3              break;
 527   3          }
 528   2      
 529   2          default:
 530   2              break;
 531   2          }
 532   1      
 533   1      #if USE_PRINTF_DEBUG
                  printf("KeyControl_Enter\r\n");
              #endif
 536   1      }
 537          
 538          void KeyControl_Menu(void) //控件状态--Menu
 539          {
 540   1          switch (Ui_Status.Widget)
 541   1          {
 542   2          case CONTROL_PASSWORD_CHANGE:
 543   2          {
 544   3              if (!System_Parameter.PSWNext.First_Input_Flag)
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 10  

 545   3              {
 546   4      
 547   4                  InputOffect(&PassWordChange1);
 548   4              }
 549   3              else
 550   3              {
 551   4      
 552   4                  InputOffect(&PassWordChange2);
 553   4              }
 554   3      
 555   3              break;
 556   3          }
 557   2      
 558   2          default:
 559   2              break;
 560   2          }
 561   1      
 562   1      #if USE_PRINTF_DEBUG
                  printf("KeyControl_Menu\r\n");
              #endif
 565   1      }
 566          
 567          void KeyControl_Cancel(void) //控件状态--Cancel
 568          {
 569   1          switch (Ui_Status.Widget)
 570   1          {
 571   2          case CONTROL_PASSWORD_CHANGE:
 572   2          {
 573   3              PassWordDelete(&PassWordChange1); //清0数据
 574   3                  PassWordDelete(&PassWordChange2);
 575   3              System_Parameter.PSWNext.First_Input_Flag = false;
 576   3              System_Parameter.PSWNext.Bit_Efficient_Flag = false;
 577   3              break;
 578   3          }
 579   2      
 580   2          case CONTROL_COMMUNICA:
 581   2          {
 582   3              // CommunciaIndex = CommunciaType; //如果没有确定,直接返回，则恢复当前状态索引
 583   3              break;
 584   3          }
 585   2      
 586   2          case CONTROL_BAUDSETTING:
 587   2          {
 588   3              // BaudWillIndex = BaudIndex; //如果没有确定,直接返回，则恢复当前状态索引
 589   3              break;
 590   3          }
 591   2      
 592   2          case CONTROL_RELOAD:
 593   2          {
 594   3              break;
 595   3          }
 596   2      
 597   2          default:
 598   2              break;
 599   2          }
 600   1      
 601   1          /*返回菜单界面*/
 602   1          Ui_Status.Ui = MENU_STATE;
 603   1          LcdShow(RefreshMenuDisp); //显示设置
 604   1      
 605   1      #if USE_PRINTF_DEBUG
                  printf("KeyControl_Cancel\r\n");
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 11  

              #endif
 608   1      }
 609          
 610          /*控件状态--Up*/
 611          void KeyControl_Up(void)
 612          {
 613   1          switch (Ui_Status.Widget)
 614   1          {
 615   2          case CONTROL_PASSWORD_CHANGE:
 616   2          {
 617   3              if (!System_Parameter.PSWNext.First_Input_Flag)
 618   3              {
 619   4                  uint8_t Value = PassWordInput(ADD, &PassWordChange1);
 620   4                  uint8_t temp[2] = {0}; //字符
 621   4                  GUI_String(PassWordChange1.PSWNext.Index * 20 + 100, 18, myitoa(Value, temp, 10), EN_5_8);
 622   4              }
 623   3              else
 624   3              {
 625   4                  uint8_t Value = PassWordInput(ADD, &PassWordChange2);
 626   4                  uint8_t temp[2] = {0}; //字符
 627   4                  GUI_String(PassWordChange2.PSWNext.Index * 20 + 100, 38, myitoa(Value, temp, 10), EN_5_8);
 628   4              }
 629   3          }
 630   2          break;
 631   2      
 632   2          case CONTROL_COMMUNICA:
 633   2          {
 634   3              System_Parameter.CommunicationType ^= 1;
 635   3              LcdShow(CommunicaUIshow); //通讯设置界面
 636   3          }
 637   2          break;
 638   2      
 639   2          case CONTROL_BAUDSETTING:
 640   2          {
 641   3              /*箭头索引减小*/
 642   3              if ((M_Show[SEC0_MENU].Finger_Index--) == 0)
 643   3                  M_Show[SEC0_MENU].Finger_Index = 0;
 644   3      
 645   3              M_Show[SEC0_MENU].Option_Index = LoopIndex(UPWORD, M_Show[SEC0_MENU].Option_Index, OptionlistSize1
             -);
 646   3      
 647   3              if (M_Show[SEC0_MENU].Option_Index == (OptionlistSize1 - 1)) //索引逻辑
 648   3              {
 649   4                  M_Show[SEC0_MENU].Finger_Index = 2;
 650   4              }
 651   3              /*菜单滑动逻辑*/
 652   3              if (M_Show[SEC0_MENU].Finger_Index == 0)
 653   3              {
 654   4                  M_Show[SEC0_MENU].OptionIndex_buf[0] = M_Show[SEC0_MENU].Option_Index;
 655   4                  M_Show[SEC0_MENU].OptionIndex_buf[1] = M_Show[SEC0_MENU].Option_Index + 1;
 656   4                  M_Show[SEC0_MENU].OptionIndex_buf[2] = M_Show[SEC0_MENU].Option_Index + 2;
 657   4              }
 658   3              else if (M_Show[SEC0_MENU].Finger_Index == 1)
 659   3              {
 660   4                  M_Show[SEC0_MENU].OptionIndex_buf[0] = M_Show[SEC0_MENU].Option_Index - 1;
 661   4                  M_Show[SEC0_MENU].OptionIndex_buf[1] = M_Show[SEC0_MENU].Option_Index;
 662   4                  M_Show[SEC0_MENU].OptionIndex_buf[2] = M_Show[SEC0_MENU].Option_Index + 1;
 663   4              }
 664   3              else
 665   3              {
 666   4                  M_Show[SEC0_MENU].OptionIndex_buf[0] = M_Show[SEC0_MENU].Option_Index - 2;
 667   4                  M_Show[SEC0_MENU].OptionIndex_buf[1] = M_Show[SEC0_MENU].Option_Index - 1;
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 12  

 668   4                  M_Show[SEC0_MENU].OptionIndex_buf[2] = M_Show[SEC0_MENU].Option_Index;
 669   4              }
 670   3      
 671   3              LcdShow(RefreshBaudDisp);                                                   //刷新显示
 672   3              M_Show[SEC0_MENU].OptionNow = &Optionlist1[M_Show[SEC0_MENU].Option_Index]; //赋值当前选项
 673   3          }
 674   2          break;
 675   2          /*本机热点设置*/
 676   2          case CONTROL_HOTSPOT:
 677   2          {
 678   3              System_Parameter.Apstate = LoopIndex(DOWMWORD, System_Parameter.Apstate, G_Aplist_Size);
 679   3              GUI_String(115, 10, Aplist[System_Parameter.Apstate].pstring, CH_12_12);
 680   3          }break;
 681   2          case CONTROL_WORKMODE:
 682   2          {
 683   3              System_Parameter.WorkMode = LoopIndex(DOWMWORD, System_Parameter.WorkMode, G_Modelist_Size);
 684   3              GUI_String(115, 10, Modelist[System_Parameter.WorkMode].pstring, CH_12_12);
 685   3          }break;
 686   2          default:
 687   2              break;
 688   2          }
 689   1      
 690   1      #if USE_PRINTF_DEBUG
                  printf("KeyControl_Up\r\n");
              #endif
 693   1      }
 694          
 695          void KeyControl_Down(void) //控件状态--Down
 696          {
 697   1          switch (Ui_Status.Widget)
 698   1          {
 699   2          case CONTROL_PASSWORD_CHANGE:
 700   2          {
 701   3              if (!System_Parameter.PSWNext.First_Input_Flag)
 702   3              {
 703   4                  uint8_t Value = PassWordInput(SUB, &PassWordChange1);
 704   4                  uint8_t temp[2] = {0}; //字符
 705   4                  GUI_String(PassWordChange1.PSWNext.Index * 20 + 100, 18, myitoa(Value, temp, 10), EN_5_8);
 706   4              }
 707   3              else
 708   3              {
 709   4      
 710   4                  uint8_t Value = PassWordInput(SUB, &PassWordChange2);
 711   4                  uint8_t temp[2]= {0}; //字符
 712   4                  GUI_String(PassWordChange2.PSWNext.Index * 20 + 100, 38, myitoa(Value, temp, 10), EN_5_8);
 713   4              }
 714   3          }
 715   2          break;
 716   2      
 717   2          case CONTROL_COMMUNICA:
 718   2          {
 719   3              System_Parameter.CommunicationType ^= 1;
 720   3              LcdShow(CommunicaUIshow); //通讯设置界面
 721   3          }
 722   2          break;
 723   2      
 724   2          case CONTROL_BAUDSETTING:
 725   2          {
 726   3              if ((M_Show[SEC0_MENU].Finger_Index++) >= 2) //箭头索引增加
 727   3                  M_Show[SEC0_MENU].Finger_Index = 2;
 728   3      
 729   3              M_Show[SEC0_MENU].Option_Index = LoopIndex(DOWMWORD, M_Show[SEC0_MENU].Option_Index, OptionlistSiz
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 13  

             -e1); //选项索引
 730   3      
 731   3              if (M_Show[SEC0_MENU].Option_Index == 0) //索引逻辑
 732   3              {
 733   4                  M_Show[SEC0_MENU].Finger_Index = 0;
 734   4              }
 735   3      
 736   3              if (M_Show[SEC0_MENU].Finger_Index == 0)
 737   3              {
 738   4                  M_Show[SEC0_MENU].OptionIndex_buf[0] = M_Show[SEC0_MENU].Option_Index;
 739   4                  M_Show[SEC0_MENU].OptionIndex_buf[1] = M_Show[SEC0_MENU].Option_Index + 1;
 740   4                  M_Show[SEC0_MENU].OptionIndex_buf[2] = M_Show[SEC0_MENU].Option_Index + 2;
 741   4              }
 742   3              else if (M_Show[SEC0_MENU].Finger_Index == 1)
 743   3              {
 744   4                  M_Show[SEC0_MENU].OptionIndex_buf[0] = M_Show[SEC0_MENU].Option_Index - 1;
 745   4                  M_Show[SEC0_MENU].OptionIndex_buf[1] = M_Show[SEC0_MENU].Option_Index;
 746   4                  M_Show[SEC0_MENU].OptionIndex_buf[2] = M_Show[SEC0_MENU].Option_Index + 1;
 747   4              }
 748   3              else
 749   3              {
 750   4                  M_Show[SEC0_MENU].OptionIndex_buf[0] = M_Show[SEC0_MENU].Option_Index - 2;
 751   4                  M_Show[SEC0_MENU].OptionIndex_buf[1] = M_Show[SEC0_MENU].Option_Index - 1;
 752   4                  M_Show[SEC0_MENU].OptionIndex_buf[2] = M_Show[SEC0_MENU].Option_Index;
 753   4              }
 754   3              /*刷新当前选项卡*/
 755   3              LcdShow(RefreshBaudDisp);
 756   3              M_Show[SEC0_MENU].OptionNow = &Optionlist1[M_Show[SEC0_MENU].Option_Index]; //赋值当前选项
 757   3          }
 758   2          break;
 759   2          /*本机热点设置*/
 760   2          case CONTROL_HOTSPOT:
 761   2          {
 762   3              System_Parameter.Apstate = LoopIndex(UPWORD, System_Parameter.Apstate, G_Aplist_Size);
 763   3              GUI_String(115, 10, Aplist[System_Parameter.Apstate].pstring, CH_12_12);
 764   3          }break;
 765   2          /*工作模式设置*/
 766   2          case CONTROL_WORKMODE:
 767   2          {
 768   3              System_Parameter.WorkMode = LoopIndex(UPWORD, System_Parameter.WorkMode, G_Modelist_Size);
 769   3              GUI_String(115, 10, Modelist[System_Parameter.WorkMode].pstring, CH_12_12);
 770   3          }break;
 771   2          default:
 772   2              break;
 773   2          }
 774   1      
 775   1      #if USE_PRINTF_DEBUG
                  printf("KeyControl_Down\r\n");
              #endif
 778   1      }
 779          
 780          /*波特率控件状态--up*/
 781          void KeyBaud_Up(void)
 782          {
 783   1          switch (Ui_Status.Widget)
 784   1          {
 785   2          case CONTROL_BAUD1:
 786   2          {
 787   3              System_Parameter.BaudIndex[0] = LoopIndex(DOWMWORD, System_Parameter.BaudIndex[0], G_BaudList_Size
             -);
 788   3              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[0]].pstring, EN_5_8);
 789   3          }
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 14  

 790   2          break;
 791   2          case CONTROL_BAUD2:
 792   2          {
 793   3              System_Parameter.BaudIndex[1] = LoopIndex(DOWMWORD, System_Parameter.BaudIndex[1], G_BaudList_Size
             -);
 794   3              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[1]].pstring, EN_5_8);
 795   3          }
 796   2          break;
 797   2          case CONTROL_BAUD3:
 798   2          {
 799   3              System_Parameter.BaudIndex[2] = LoopIndex(DOWMWORD, System_Parameter.BaudIndex[2], G_BaudList_Size
             -);
 800   3              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[2]].pstring, EN_5_8);
 801   3          }
 802   2          break;
 803   2          case CONTROL_BAUD4:
 804   2          {
 805   3              System_Parameter.BaudIndex[3] = LoopIndex(DOWMWORD, System_Parameter.BaudIndex[3], G_BaudList_Size
             -);
 806   3              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[3]].pstring, EN_5_8);
 807   3          }
 808   2          break;
 809   2          default:
 810   2              break;
 811   2          }
 812   1      #if USE_PRINTF_DEBUG
                  printf("KeyBaud_Up\r\n");
              #endif
 815   1      }
 816          
 817          /*波特率控件状态--Down*/
 818          void KeyBaud_Down(void)
 819          {
 820   1          switch (Ui_Status.Widget)
 821   1          {
 822   2          case CONTROL_BAUD1:
 823   2          {
 824   3              System_Parameter.BaudIndex[0] = LoopIndex(UPWORD, System_Parameter.BaudIndex[0], G_BaudList_Size);
 825   3              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[0]].pstring, EN_5_8);
 826   3          }
 827   2          break;
 828   2          case CONTROL_BAUD2:
 829   2          {
 830   3              System_Parameter.BaudIndex[1] = LoopIndex(UPWORD, System_Parameter.BaudIndex[1], G_BaudList_Size);
 831   3              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[1]].pstring, EN_5_8);
 832   3          }
 833   2          break;
 834   2          case CONTROL_BAUD3:
 835   2          {
 836   3              System_Parameter.BaudIndex[2] = LoopIndex(UPWORD, System_Parameter.BaudIndex[2], G_BaudList_Size);
 837   3              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[2]].pstring, EN_5_8);
 838   3          }
 839   2          break;
 840   2          case CONTROL_BAUD4:
 841   2          {
 842   3              System_Parameter.BaudIndex[3] = LoopIndex(UPWORD, System_Parameter.BaudIndex[3], G_BaudList_Size);
 843   3              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[3]].pstring, EN_5_8);
 844   3          }
 845   2          break;
 846   2          default:
 847   2              break;
 848   2          }
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 15  

 849   1      #if USE_PRINTF_DEBUG
                  printf("KeyBaud_Down\r\n");
              #endif
 852   1      }
 853          
 854          /*波特率控件状态--Enter*/
 855          void KeyBaud_Enter(void)
 856          {
 857   1          switch (Ui_Status.Widget)
 858   1          {
 859   2          case CONTROL_BAUD1:
 860   2          {
 861   3              SET_BRT1(1, Baudlist[System_Parameter.BaudIndex[0]].BaudValue);
 862   3              ControlSave();
 863   3      
 864   3              clear_screen();
 865   3              GUI_String(70, 22, "修改成功", CH_12_12); //显示修改结果
 866   3              Delay_ms(500);
 867   3              /*修改成功后返回*/
 868   3              KeyBaud_Cancel();
 869   3          }
 870   2          break;
 871   2          case CONTROL_BAUD2:
 872   2          {
 873   3              SET_BRT1(2, Baudlist[System_Parameter.BaudIndex[1]].BaudValue);
 874   3              ControlSave();
 875   3      
 876   3              clear_screen();
 877   3              GUI_String(70, 22, "修改成功", CH_12_12); //显示修改结果
 878   3              Delay_ms(500);
 879   3              /*修改成功后返回*/
 880   3              KeyBaud_Cancel();
 881   3          }
 882   2          break;
 883   2          case CONTROL_BAUD3:
 884   2          {
 885   3              SET_BRT1(3, Baudlist[System_Parameter.BaudIndex[2]].BaudValue);
 886   3              ControlSave();
 887   3      
 888   3              clear_screen();
 889   3              GUI_String(70, 22, "修改成功", CH_12_12); //显示修改结果
 890   3              Delay_ms(500);
 891   3              /*修改成功后返回*/
 892   3              KeyBaud_Cancel();
 893   3          }
 894   2          break;
 895   2          case CONTROL_BAUD4:
 896   2          {
 897   3              SET_BRT1(4, Baudlist[System_Parameter.BaudIndex[3]].BaudValue);
 898   3              ControlSave();
 899   3      
 900   3              clear_screen();
 901   3              GUI_String(70, 22, "修改成功", CH_12_12); //显示修改结果
 902   3              Delay_ms(500);
 903   3              // LcdShow(BaudSettingUI4show); //波特率设置界面
 904   3              /*修改成功后返回*/
 905   3              KeyBaud_Cancel();
 906   3          }
 907   2          break;
 908   2          default:
 909   2              break;
 910   2          }
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 16  

 911   1      #if USE_PRINTF_DEBUG
                  printf("KeyBaud_Enter\r\n");
              #endif
 914   1      }
 915          
 916          /*波特率控件状态--Cancel*/
 917          void KeyBaud_Cancel(void)
 918          { /*返回上级菜单界面*/
 919   1          Ui_Status.Ui = CONTROL_STATE;
 920   1          /*赋值控件*/
 921   1          Ui_Status.Widget = CONTROL_BAUDSETTING;
 922   1          LcdShow(RefreshBaudDisp);
 923   1      
 924   1      #if USE_PRINTF_DEBUG
                  printf("KeyBaud_Cancel\r\n");
              #endif
 927   1      }
 928          
 929          /*波特率控件状态--Menue*/
 930          void KeyBaud_Menu(void)
 931          {
 932   1      #if USE_PRINTF_DEBUG
                  printf("KeyBaud_Menu\r\n");
              #endif
 935   1      }
 936          
 937          /*一级菜单界面刷新显示*/
 938          void RefreshMenuDisp(void)
 939          {
 940   1          uint8_t i = 0;
 941   1          clear_screen(); //清屏
 942   1      
 943   1          for (; i < 3; i++)
 944   1          {
 945   2              GUI_String(70, 20 * i + 5, Optionlist[M_Show[MAIN_MENU].OptionIndex_buf[i]].pString, CH_12_12);
 946   2          }
 947   1      
 948   1          GUI_Lattice(50, 6 + M_Show[MAIN_MENU].Finger_Index * 20, 16, 12, finger);
 949   1      }
 950          
 951          /*菜单界面下二级菜单刷新显示*/
 952          void RefreshBaudDisp(void)
 953          {
 954   1          uint8_t i = 0;
 955   1          clear_screen(); //清屏
 956   1      
 957   1          for (; i < 3U; i++)
 958   1          {
 959   2              GUI_String(70, 20 * i + 5, Optionlist1[M_Show[SEC0_MENU].OptionIndex_buf[i]].pString, CH_12_12);
 960   2          }
 961   1      
 962   1          GUI_Lattice(50, 6 + M_Show[SEC0_MENU].Finger_Index * 20, 16, 12, finger);
 963   1      }
 964          
 965          /**
 966           * @brief       波特率设置二级菜单
 967           * @details
 968           * @param       None
 969           * @retval      None
 970           */
 971          void Baud_Setting(void)
 972          {
C51 COMPILER V9.60.0.0   MENU                                                              12/21/2021 17:57:20 PAGE 17  

 973   1          /*刷新界面*/
 974   1          LcdShow(RefreshBaudDisp);
 975   1          // /*切换到波特率设置界面*/
 976   1          // UI_STATE = BAUD_STATE;
 977   1          // /*无操作返回定时器开启*/
 978   1          // PublicTimer16.MenuDly16.Timer16Count = T_60S;
 979   1      }
 980          
 981          void LcdDly(KEY_e key)
 982          { /*如果已经在密码输入界面*/
 983   1          if (Ui_Status.Ui == MAIN_STATE)
 984   1          { /*并且当前控件为屏保，不启用定时器*/
 985   2              if (Ui_Status.Widget == CONTROL_SCREENSAVE)
 986   2                  return;
 987   2          }
 988   1      
 989   1          if (key == NO_KEY)
 990   1          {
 991   2              if (PublicTimer16.MenuDly16.Timer16Flag)
 992   2              {
 993   3                  PublicTimer16.MenuDly16.Timer16Flag = false;
 994   3                  Ui_Status.Ui = MAIN_STATE;
 995   3                  Ui_Status.Widget = CONTROL_SCREENSAVE;
 996   3                  /*屏保界面界面*/
 997   3                  LcdShow(&ScreensaverUiShow);
 998   3                  PassWordDelete(&PassWordI);
 999   3              }
1000   2          }
1001   1          else
1002   1          {
1003   2              PublicTimer16.MenuDly16.Timer16Count = T_60S;
1004   2          }
1005   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2934    ----
   CONSTANT SIZE    =    247    ----
   XDATA SIZE       =    197      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

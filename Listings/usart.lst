C51 COMPILER V9.60.0.0   USART                                                             10/27/2021 17:42:57 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\Objects\usart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\usart.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\Include;.\FreeMod
                    -Bus\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\usart.lst) OBJECT(.\Objects\usart.obj)

line level    source

   1          #include "usart.h"
   2          #include "Control.h"
   3          #include "systemTimer.h"
   4          // #include "queue.h"
   5          
   6          /*********************************************************
   7          * 函数名：
   8          * 功能：
   9          * 参数：
  10          * 作者：
  11          * note：
  12                          同时使用多个串口的时候会出现数据传输错误的情况 建议在使用该板子与其他
  13                          通讯模块建立通讯的时候使用1对1的建立连接的模式
  14          
  15                          解决了多串口同时数据传输错误问题 //2021/5/31
  16          
  17                          在切换串口的引脚输入时，建议将RX端初始化的时候给个0值 TX引脚手动给个1值
  18                          （基于STC单片机的特性）
  19          
  20          **********************************************************/
  21          
  22          Uart_HandleTypeDef Uart1; //串口1句柄
  23          Uart_HandleTypeDef Uart2; //串口2句柄
  24          Uart_HandleTypeDef Uart3; //串口3句柄
  25          Uart_HandleTypeDef Uart4; //串口4句柄
  26          
  27          /*********************************************************
  28          * 函数名：void Uart_1Init(void)
  29          * 功能：  串口1的初始化
  30          * 参数：
  31          * 作者：  LHC
  32          * note：
  33          *               使用的是定时器1作为波特率发生器,LAN口用
  34          **********************************************************/
  35          void Uart1_Init(void) //串口1选择定时器1作为波特率发生器
  36          {
  37   1          Uart1.Instance = UART1;
  38   1          Uart1.Register_SCON = 0x50; //模式1，8位数据，可变波特率
  39   1          Uart1.Uart_Mode = 0x00;     //定时器模式0，16bit自动重载
  40   1          Uart1.Uart_Count = UART1_BRT;
  41   1          Uart1.RunUart_Enable = true;
  42   1          Uart1.Interrupt_Enable = true;
  43   1          Uart1.Register_AUXR = 0x40;  //定时器1，1T模式
  44   1          Uart1.Register_AUXR &= 0xFE; //波特率发生器选用定时器1，最好按照要求来
  45   1      
  46   1          Uart1.Uart_NVIC.Register_IP = 0xEF; //PS=0,PSH=0,串口1中断优先级为第0级，最低级
  47   1          Uart1.Uart_NVIC.Register_IPH = 0xEF;
  48   1      
  49   1          Uart_Base_MspInit(&Uart1);
  50   1      }
  51          
  52          /*********************************************************
  53          * 函数名：void Uart1_ISR() interrupt 4 using 2
  54          * 功能：  串口1的定时中断服务函数
C51 COMPILER V9.60.0.0   USART                                                             10/27/2021 17:42:57 PAGE 2   

  55          * 参数：
  56          * 作者：  LHC
  57          * note：
  58          *               使用的是定时器1作为波特率发生器,LAN口用
  59          **********************************************************/
  60          void Uart1_ISR() interrupt 4 //using 2 //串口1的定时中断服务函数
  61          {
  62   1          /*发送中断标志*/
  63   1          if (TI)
  64   1          {
  65   2              TI = 0;
  66   2              /*发送完成，清除占用*/
  67   2              Uart1.Uartx_busy = false;
  68   2          }
  69   1          /*接收中断标志*/
  70   1          if (RI)
  71   1          {
  72   2              RI = 0;
  73   2      
  74   2              /*当收到数据时打开帧中断定时器*/
  75   2              COM_UART1.LNode[COM_UART1.Wptr].Timer_Flag = true;
  76   2              /*当前节点还没有收到一帧数据*/
  77   2              // if(!COM_UART1.LNode[COM_UART1.Wptr].Frame_Flag)
  78   2              // {
  79   2              //      /*刷新帧超时时间*/
  80   2              //      COM_UART1.LNode[COM_UART1.Wptr].OverTime = MAX_SILENCE;
  81   2              //      if(COM_UART1.LNode[COM_UART1.Wptr].Rx_Length < MAX_SIZE)
  82   2              //      {       /*把数据存到当前节点的缓冲区*/
  83   2              //              COM_UART1.LNode[COM_UART1.Wptr].Rx_Buffer[COM_UART1.LNode[COM_UART1.Wptr].Rx_Length++] = S2BU
             -F;
  84   2              //      }
  85   2              //      else
  86   2              //      {       /*数据缓冲区溢出导致的帧截断*/
  87   2              //                      COM_UART1.LNode[COM_UART1.Wptr].Frame_Flag = true;
  88   2              //      }
  89   2              // }
  90   2          }
  91   1      }
  92          
  93          /*********************************************************
  94          * 函数名：void Uart_2Init(void)
  95          * 功能：  串口2的初始化
  96          * 参数：
  97          * 作者：  LHC
  98          * note：
  99          *               使用的是定时器2作为波特率发生器,485口用
 100          **********************************************************/
 101          void Uart2_Init(void) //串口2选择定时器2作为波特率发生器
 102          {
 103   1          Uart2.Instance = UART2;
 104   1          Uart2.Register_SCON = 0x10; //模式1，8位数据，可变波特率，开启串口2接收
 105   1          Uart2.Uart_Mode = 0x00;     //定时器模式0，16bit自动重载
 106   1          Uart2.Uart_Count = UART2_BRT;
 107   1          Uart2.RunUart_Enable = true;
 108   1          Uart2.Interrupt_Enable = 0x01;
 109   1          Uart2.Register_AUXR = 0x14;         //开启定时器2，1T模式
 110   1          Uart2.Uart_NVIC.Register_IP = 0x01; //PS2=1,PS2H=0,串口2中断优先级为第1级
 111   1          Uart2.Uart_NVIC.Register_IPH = 0xFE;
 112   1      
 113   1          Uart_Base_MspInit(&Uart2);
 114   1      }
 115          
C51 COMPILER V9.60.0.0   USART                                                             10/27/2021 17:42:57 PAGE 3   

 116          /*********************************************************
 117          * 函数名：void Uart2_ISR() interrupt 8 using 2
 118          * 功能：  串口2中断函数
 119          * 参数：
 120          * 作者：  LHC
 121          * note：
 122          *               使用的是定时器2作为波特率发生器,4G口用
 123          **********************************************************/
 124          void Uart2_ISR() interrupt 8 //using 2
 125          {                            /*发送中断*/
 126   1          if (S2CON & S2TI)
 127   1          {
 128   2              S2CON &= ~S2TI;
 129   2              /*发送完成，清除占用*/
 130   2              Uart2.Uartx_busy = false;
 131   2          }
 132   1          /*接收中断*/
 133   1          if (S2CON & S2RI)
 134   1          {
 135   2              S2CON &= ~S2RI;
 136   2      
 137   2              /*当收到数据时打开帧中断定时器*/
 138   2              COM_UART2.LNode[COM_UART2.Wptr].Timer_Flag = true;
 139   2              /*当前节点还没有收到一帧数据*/
 140   2              if (!COM_UART2.LNode[COM_UART2.Wptr].Frame_Flag)
 141   2              {
 142   3                  /*刷新帧超时时间*/
 143   3                  COM_UART2.LNode[COM_UART2.Wptr].OverTime = MAX_SILENCE;
 144   3                  if (COM_UART2.LNode[COM_UART2.Wptr].Rx_Length < MAX_SIZE)
 145   3                  { /*把数据存到当前节点的缓冲区*/
 146   4                      COM_UART2.LNode[COM_UART2.Wptr].Rx_Buffer[COM_UART2.LNode[COM_UART2.Wptr].Rx_Length++] = S
             -2BUF;
 147   4                  }
 148   3              }
 149   2          }
 150   1      }
 151          
 152          ///*********************************************************
 153          //* 函数名：void Uart_3Init(void)
 154          //* 功能：  串口3的初始化
 155          //* 参数：
 156          //* 作者：  LHC
 157          //* note：
 158          //*             使用的是定时器3作为波特率发生器,恩外部485转发
 159          //**********************************************************/
 160          void Uart3_Init(void) //串口3选择定时器3作为波特率发生器
 161          {
 162   1          Uart3.Instance = UART3;
 163   1          Uart3.Register_SCON = 0x50; //模式1，8位数据，可变波特率；定时器3，1T模式
 164   1          Uart3.Uart_Mode = 0x0A;     //打开定时器3，1T模式
 165   1          Uart3.Uart_Count = UART3_BRT;
 166   1          Uart3.Interrupt_Enable = 0x08;
 167   1      
 168   1          Uart_Base_MspInit(&Uart3);
 169   1      }
 170          
 171          /*********************************************************
 172          * 函数名：void Uart3_ISR() interrupt 17 using 2
 173          * 功能：  串口3中断函数
 174          * 参数：
 175          * 作者：  LHC
 176          * note：
C51 COMPILER V9.60.0.0   USART                                                             10/27/2021 17:42:57 PAGE 4   

 177          *               使用的是定时器3作为波特率发生器,RS485模块
 178          **********************************************************/
 179          void Uart3_ISR() interrupt 17 //using 2
 180          {
 181   1          /*发送中断完成*/
 182   1          if (S3CON & S3TI)
 183   1          {
 184   2              S3CON &= ~S3TI;
 185   2              Uart3.Uartx_busy = false; //发送完成，清除占用
 186   2          }
 187   1          /*接收中断*/
 188   1          if (S3CON & S3RI)
 189   1          {
 190   2              S3CON &= ~S3RI;
 191   2      
 192   2              /*当收到数据时打开帧中断定时器*/
 193   2              COM_UART3.LNode[COM_UART3.Wptr].Timer_Flag = true;
 194   2              /*当前节点还没有收到一帧数据*/
 195   2              if (!COM_UART3.LNode[COM_UART3.Wptr].Frame_Flag)
 196   2              {
 197   3                  /*刷新帧超时时间*/
 198   3                  COM_UART3.LNode[COM_UART3.Wptr].OverTime = MAX_SILENCE;
 199   3                  if (COM_UART3.LNode[COM_UART3.Wptr].Rx_Length < MAX_SIZE)
 200   3                  { /*把数据存到当前节点的缓冲区*/
 201   4                      COM_UART3.LNode[COM_UART3.Wptr].Rx_Buffer[COM_UART3.LNode[COM_UART3.Wptr].Rx_Length++] = S
             -3BUF;
 202   4                  }
 203   3              }
 204   2          }
 205   1      }
 206          
 207          ///*********************************************************
 208          //* 函数名：void Uart_4Init(void)
 209          //* 功能：  串口4的初始化
 210          //* 参数：
 211          //* 作者：  LHC
 212          //* note：
 213          //*             使用的是定时器4作为波特率发生器,PLC口用
 214          //**********************************************************/
 215          void Uart4_Init(void) //串口4选择定时器4作为波特率发生器
 216          {
 217   1          Uart4.Instance = UART4;
 218   1          Uart4.Register_SCON = 0x50; //模式1，8位数据，可变波特率
 219   1          Uart4.Uart_Mode = 0xA0;     //定时器模式0，16bit自动重载;开启定时器4，1T模式
 220   1          Uart4.Uart_Count = UART4_BRT;
 221   1          Uart4.Interrupt_Enable = 0x10;
 222   1      
 223   1          Uart_Base_MspInit(&Uart4);
 224   1      }
 225          
 226          /*********************************************************
 227          * 函数名：void Uart4_Isr() interrupt 18 using 1
 228          * 功能：  串口4中断函数
 229          * 参数：
 230          * 作者：  LHC
 231          * note：
 232          *               使用的是定时器4作为波特率发生器,PLC口用
 233          **********************************************************/
 234          void Uart4_Isr() interrupt 18 //using 1
 235          {                             /*发送中断*/
 236   1          if (S4CON & S4TI)
 237   1          {
C51 COMPILER V9.60.0.0   USART                                                             10/27/2021 17:42:57 PAGE 5   

 238   2              S4CON &= ~S4TI;
 239   2              /*发送完成，清除占用*/
 240   2              Uart4.Uartx_busy = false;
 241   2          }
 242   1          /*接收中断*/
 243   1          if (S4CON & S4RI)
 244   1          {
 245   2              S4CON &= ~S4RI;
 246   2      
 247   2              /*当收到数据时打开帧中断定时器*/
 248   2              COM_UART4.LNode[COM_UART4.Wptr].Timer_Flag = true;
 249   2              /*当前节点还没有收到一帧数据*/
 250   2              if (!COM_UART4.LNode[COM_UART4.Wptr].Frame_Flag)
 251   2              {
 252   3                  /*刷新帧超时时间*/
 253   3                  COM_UART4.LNode[COM_UART4.Wptr].OverTime = MAX_SILENCE;
 254   3                  if (COM_UART4.LNode[COM_UART4.Wptr].Rx_Length < MAX_SIZE)
 255   3                  { /*把数据存到当前节点的缓冲区*/
 256   4                      COM_UART4.LNode[COM_UART4.Wptr].Rx_Buffer[COM_UART4.LNode[COM_UART4.Wptr].Rx_Length++] = S
             -4BUF;
 257   4                  }
 258   3              }
 259   2          }
 260   1      }
 261          
 262          /**********************************公用函数************************/
 263          
 264          /*********************************************************
 265          * 函数名：Uart_Base_MspInit(Uart_HandleTypeDef *uart_baseHandle)
 266          * 功能：  所有串口底层初始化函数
 267          * 参数：  Uart_HandleTypeDef *uart_baseHandle串口句柄
 268          * 作者：  LHC
 269          * note：
 270          *               注意正确给出串口句柄
 271          **********************************************************/
 272          void Uart_Base_MspInit(Uart_HandleTypeDef *const uart_baseHandle)
 273          {
 274   1          if (uart_baseHandle->Instance == UART1)
 275   1          {
 276   2              SCON = uart_baseHandle->Register_SCON;
 277   2              TMOD |= uart_baseHandle->Uart_Mode;
 278   2              TL1 = uart_baseHandle->Uart_Count;
 279   2              TH1 = uart_baseHandle->Uart_Count >> 8;
 280   2              TR1 = uart_baseHandle->RunUart_Enable;
 281   2              AUXR |= uart_baseHandle->Register_AUXR;
 282   2              IP &= uart_baseHandle->Uart_NVIC.Register_IP;
 283   2              IPH &= uart_baseHandle->Uart_NVIC.Register_IPH;
 284   2      #if USEING_PRINTF //如果使用printf
                      TI = 1;   //放到printf重定向
              #else
 287   2              ES = uart_baseHandle->Interrupt_Enable; //串口1中断允许位
 288   2      #endif
 289   2          }
 290   1          else if (uart_baseHandle->Instance == UART2)
 291   1          {
 292   2              S2CON = uart_baseHandle->Register_SCON;
 293   2              TL2 = uart_baseHandle->Uart_Count;
 294   2              TH2 = uart_baseHandle->Uart_Count >> 8;
 295   2              AUXR |= uart_baseHandle->Register_AUXR;
 296   2              IE2 |= uart_baseHandle->Interrupt_Enable; //串口2中断允许位
 297   2              IP2 &= uart_baseHandle->Uart_NVIC.Register_IP;
 298   2              IP2H &= uart_baseHandle->Uart_NVIC.Register_IPH;
C51 COMPILER V9.60.0.0   USART                                                             10/27/2021 17:42:57 PAGE 6   

 299   2          }
 300   1          else if (uart_baseHandle->Instance == UART3)
 301   1          {
 302   2              S3CON = uart_baseHandle->Register_SCON;
 303   2              T4T3M = uart_baseHandle->Uart_Mode;
 304   2              T3L = uart_baseHandle->Uart_Count;
 305   2              T3H = uart_baseHandle->Uart_Count >> 8;
 306   2              IE2 |= uart_baseHandle->Interrupt_Enable; //串口3中断允许位
 307   2          }
 308   1          else if (uart_baseHandle->Instance == UART4)
 309   1          {
 310   2              S4CON = uart_baseHandle->Register_SCON;
 311   2              T4T3M |= uart_baseHandle->Uart_Mode; //此处串口3和串口4共用
 312   2              T4L = uart_baseHandle->Uart_Count;
 313   2              T4H = uart_baseHandle->Uart_Count >> 8;
 314   2              IE2 |= uart_baseHandle->Interrupt_Enable; //串口4中断允许位
 315   2          }
 316   1      }
 317          
 318          /*********************************************************
 319          * 函数名：static void Busy_Await(Uart_HandleTypeDef * const Uart, uint16_t overtime)
 320          * 功能：  字节发送超时等待机制
 321          * 参数：  Uart_HandleTypeDef * const Uart;uint16_t overtime
 322          * 作者：  LHC
 323          * note：
 324          *               
 325          **********************************************************/
 326          void Busy_Await(Uart_HandleTypeDef *const Uart, uint16_t overtime)
 327          {
 328   1      
 329   1          while (Uart->Uartx_busy) //等待发送完成：Uart->Uartx_busy清零
 330   1          {
 331   2              if (!(overtime--))
 332   2                  break;
 333   2          }
 334   1      
 335   1          Uart->Uartx_busy = true; //发送数据，把相应串口置忙
 336   1      }
 337          
 338          /*********************************************************
 339          * 函数名：Uartx_SendStr(Uart_HandleTypeDef *const Uart,uint8_t *p,uint8_t length)
 340          * 功能：  所有串口字符串发送函数
 341          * 参数：  Uart_HandleTypeDef *const Uart,uint8_t *p;uint8_t length
 342          * 作者：  LHC
 343          * note：
 344          *               
 345          **********************************************************/
 346          void Uartx_SendStr(Uart_HandleTypeDef *const Uart, uint8_t *p, uint8_t length)
 347          {
 348   1      
 349   1          while (length--)
 350   1          {
 351   2              Busy_Await(&(*Uart), UART_BYTE_SENDOVERTIME); //等待当前字节发送完成
 352   2              switch (Uart->Instance)
 353   2              {
 354   3              case UART1:
 355   3                  SBUF = *p++;
 356   3                  break;
 357   3              case UART2:
 358   3                  S2BUF = *p++;
 359   3                  break;
 360   3              case UART3:
C51 COMPILER V9.60.0.0   USART                                                             10/27/2021 17:42:57 PAGE 7   

 361   3                  S3BUF = *p++;
 362   3                  break;
 363   3              case UART4:
 364   3                  S4BUF = *p++;
 365   3                  break;
 366   3              default:
 367   3                  break;
 368   3              }
 369   2          }
 370   1      }
 371          
 372          /*********************************************************
 373          * 函数名：char putchar(char str)
 374          * 功能：  putchar重定向,被printf调用
 375          * 参数：  char str，发送的字符串
 376          * 作者：  LHC
 377          * note：
 378          *                 使用printf函数将会占用1K 左右FLASH
 379          **********************************************************/
 380          #ifdef USEING_PRINTF
 381          //char putchar(char str)
 382          //{
 383          //    ES = 0; //关闭串口1中断
 384          //    SBUF = str;
 385          
 386          //    while(!TI);
 387          
 388          //    TI = 0;
 389          //    ES = 1;
 390          //    return str;
 391          //}
 392          #endif
 393          
 394          /**********************************公用函数************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1113    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     44       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.60.0.0   REPORT                                                            10/27/2021 17:42:56 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE REPORT
OBJECT MODULE PLACED IN .\Objects\report.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\report.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\Include;.\FreeMo
                    -dBus\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\report.lst) OBJECT(.\Objects\report.obj)

line level    source

   1          #include "report.h"
   2          #include "usart.h"
   3          
   4          void Uart_DataForward(SEL_CHANNEL Src, SEL_CHANNEL Dest);
   5          void Plc_To_Rs485(void);
   6          void Wifi_To_Plc(void);
   7          
   8          /*定义当前串口交换序列*/
   9          const ComData_Handle ComData_Array[] =
  10                  {
  11                          {CHANNEL_PLC, CHANNEL_RS485, Plc_To_Rs485},
  12                          {CHANNEL_WIFI, CHANNEL_PLC, Wifi_To_Plc},
  13                          //      {CHANNEL_LAN,  CHANNEL_PLC,   Lan_To_Plc}
  14          };
  15          
  16          #define COMDATA_SIZE (sizeof(ComData_Array) / sizeof(ComData_Handle))
  17          
  18          /*创建4条链队*/
  19          Uart_List Uart_LinkList[MAX_LQUEUE];
  20          
  21          /**
  22           * @brief       初始化静态链队
  23           * @details     
  24           * @param       *List:当前链队指针
  25           * @retval      None
  26           */
  27          // void Init_ListQueue(Uart_List *List)
  28          // {
  29          //      uint8_t i = 0;
  30          //      uint8_t count = 0;
  31          
  32          //      for(i = 0; i < MAX_NODE; i++)
  33          //      {       /*初始化队列数据域*/
  34          //              List->LNode[i].Frame_Flag = false;
  35          //              /*初始化链表节点读写指针*/
  36          //              List->Wptr = List->Rptr = 0;
  37          //              /*初始化连接关系*/
  38          //              List->LNode[i].Next = ++count;
  39          //      }
  40          // }
  41          
  42          /**
  43           * @brief       串口1对1数据转发
  44           * @details     
  45           * @param       None
  46           * @retval      None
  47           */
  48          void Uart_DataForward(SEL_CHANNEL Src, SEL_CHANNEL Dest)
  49          {
  50   1              uint8_t i = 0;
  51   1      
  52   1              for (i = 0; i < COMDATA_SIZE; i++)
  53   1              {
  54   2                      if ((Src == ComData_Array[i].Source_Channel) && (Dest == ComData_Array[i].Target_Channel))
C51 COMPILER V9.60.0.0   REPORT                                                            10/27/2021 17:42:56 PAGE 2   

  55   2                      {
  56   3                              ComData_Array[i].pHandle();
  57   3                      }
  58   2              }
  59   1      }
  60          
  61          /**
  62           * @brief       串口事件处理
  63           * @details     
  64           * @param       None
  65           * @retval      None
  66           */
  67          void Uart_Handle(void)
  68          {
  69   1              /*关闭串口4接收中断*/
  70   1              // S4CON &= ~S2REN;
  71   1              /*数据交换序列1:PLC与RS485进行数据交换*/
  72   1              Uart_DataForward(CHANNEL_PLC, CHANNEL_RS485);
  73   1              /*打开串口4接收中断*/
  74   1              // S4CON |= S2REN;
  75   1              /*数据交换序列2:WIFI与PLC进行数据交换*/
  76   1              Uart_DataForward(CHANNEL_WIFI, CHANNEL_PLC);
  77   1      }
  78          
  79          /**
  80           * @brief       PLC数据交付到RS485
  81           * @details     
  82           * @param       None
  83           * @retval      None
  84           */
  85          void Plc_To_Rs485(void)
  86          {
  87   1              // printf("Wptr=%bd,Rptr=%bd,Next=%bd\r\n",COM_UART4.Wptr, COM_UART4.Rptr, COM_UART4.LNode[COM_UART4.Wptr
             -].Next);
  88   1              // printf("Wptr=%bd,Rptr=%bd,flag=%bd\r\n", COM_UART4.Wptr, COM_UART4.Rptr, COM_UART4.LNode[COM_UART4.Wpt
             -r].Frame_Flag);
  89   1              // printf("buffer=0x%x\r\n",COM_UART4.LNode[COM_UART4.Rptr].Rx_Buffer[0]);
  90   1      
  91   1              /*STC串口4收到PLC发出的数据*/
  92   1              if ((COM_UART4.LNode[COM_UART4.Rptr].Frame_Flag)) //&& (COM_UART4.LNode[COM_UART4.Rptr].Rx_Length)
  93   1              {                                                                                                 
  94   2                      /*如果串口4接收到的数据帧不是EBM所需的，过滤掉*/
  95   2                      if (COM_UART4.LNode[COM_UART4.Rptr].Rx_Buffer[0] != MODBUS_SLAVEADDR)
  96   2                      {       /*标记该接收帧以进行处理*/
  97   3                              COM_UART4.LNode[COM_UART4.Rptr].Frame_Flag = false;
  98   3                              /*允许485发送*/
  99   3                              USART3_EN = 1;
 100   3                              /*数据转发给RS485时，数据长度+1，可以保证MAX3485芯片能够最后一位数据刚好不
             -停止在串口的停止位上*/
 101   3                              Uartx_SendStr(&Uart3, COM_UART4.LNode[COM_UART4.Rptr].Rx_Buffer, COM_UART4.LNode[COM_UART4.Rptr].Rx_Len
             -gth + 1U);
 102   3                              /*接收到数据长度置为0*/
 103   3                              COM_UART4.LNode[COM_UART4.Rptr].Rx_Length = 0;
 104   3                              /*发送中断结束后，清空对应接收缓冲区*/
 105   3                              memset(&COM_UART4.LNode[COM_UART4.Rptr].Rx_Buffer[0], 0, MAX_SIZE);
 106   3                              /*发送完一帧数据后拉低*/
 107   3                              USART3_EN = 0;
 108   3                              /*读指针指到下一个节点*/
 109   3                              SET_RPTR(4);
 110   3                      }
 111   2      
 112   2                      /*目标设备发出应答*/
C51 COMPILER V9.60.0.0   REPORT                                                            10/27/2021 17:42:56 PAGE 3   

 113   2                      if ((COM_UART3.LNode[COM_UART3.Rptr].Frame_Flag)) //&& (COM_UART3.LNode[COM_UART3.Rptr].Rx_Length)
 114   2                      {
 115   3                              /*标记该接收帧已经进行处理*/
 116   3                              COM_UART3.LNode[COM_UART3.Rptr].Frame_Flag = false;
 117   3                              /*数据返回给请求对象*/
 118   3                              Uartx_SendStr(&Uart4, COM_UART3.LNode[COM_UART3.Rptr].Rx_Buffer, COM_UART3.LNode[COM_UART3.Rptr].Rx_Len
             -gth);
 119   3                              /*接收到数据长度置为0*/
 120   3                              COM_UART3.LNode[COM_UART3.Rptr].Rx_Length = 0;
 121   3                              /*发送中断结束后，清空对应接收缓冲区*/
 122   3                              memset(&COM_UART3.LNode[COM_UART3.Rptr].Rx_Buffer[0], 0, MAX_SIZE);
 123   3                              /*读指针指到下一个节点*/
 124   3                              SET_RPTR(3);
 125   3                      }
 126   2              }
 127   1      }
 128          
 129          /**
 130           * @brief       WIFI数据交付到PLC
 131           * @details     
 132           * @param       None
 133           * @retval      None
 134           */
 135          void Wifi_To_Plc(void)
 136          {
 137   1              /*STC串口2收到WIIF发出的数据*/
 138   1              if (COM_UART2.LNode[COM_UART2.Rptr].Frame_Flag )//&& (COM_UART2.LNode[COM_UART2.Rptr].Rx_Length)
 139   1              { /*标记该接收帧以进行处理*/
 140   2                      COM_UART2.LNode[COM_UART2.Rptr].Frame_Flag = false;
 141   2                      /*串口2收到的数据从串口4转发给PLC*/
 142   2                      Uartx_SendStr(&Uart4, COM_UART2.LNode[COM_UART2.Rptr].Rx_Buffer, COM_UART2.LNode[COM_UART2.Rptr].Rx_Leng
             -th);
 143   2                      /*接收到数据长度置为0*/
 144   2                      COM_UART2.LNode[COM_UART2.Rptr].Rx_Length = 0;
 145   2                      /*发送中断结束后，清空对应接收缓冲区*/
 146   2                      memset(&COM_UART2.LNode[COM_UART2.Rptr].Rx_Buffer[0], 0, MAX_SIZE);
 147   2                      /*读指针指到下一个节点*/
 148   2                      SET_RPTR(2);
 149   2                      
 150   2                      /*数据转发完毕后，等待目标设备响应*/
 151   2                      if (COM_UART4.LNode[COM_UART4.Rptr].Frame_Flag)
 152   2                      {
 153   3                              /*如果串口4接收到的数据帧不是云平台所需的，过滤掉*/
 154   3                              if (COM_UART4.LNode[COM_UART4.Rptr].Rx_Buffer[0] == MODBUS_SLAVEADDR)
 155   3                              {
 156   4                                      /*标记该接收帧已经进行处理*/
 157   4                                      COM_UART4.LNode[COM_UART4.Rptr].Frame_Flag = false;
 158   4                                      /*数据返回给请求对象*/
 159   4                                      Uartx_SendStr(&Uart2, COM_UART4.LNode[COM_UART4.Rptr].Rx_Buffer, COM_UART4.LNode[COM_UART4.Rptr].Rx_Le
             -ngth);
 160   4                                      /*接收到数据长度置为0*/
 161   4                                      COM_UART4.LNode[COM_UART4.Rptr].Rx_Length = 0;
 162   4                                      /*发送中断结束后，清空对应接收缓冲区*/
 163   4                                      memset(&COM_UART4.LNode[COM_UART4.Rptr].Rx_Buffer[0], 0, MAX_SIZE);
 164   4                                      /*读指针指到下一个节点*/
 165   4                                      SET_RPTR(4);
 166   4                              }
 167   3                      }
 168   2              }       
 169   1      }
 170          
 171          /*禁止编译器优化该模块*/
C51 COMPILER V9.60.0.0   REPORT                                                            10/27/2021 17:42:56 PAGE 4   

 172          // #pragma OPTIMIZE(0)
 173          
 174          /**
 175           * @brief       获取16bitCRC码
 176           * @details     
 177           * @param       *ptr:参与校验数据指针,length:数据长度,init_dat:参与运算目标数据
 178           * @retval      None
 179           */
 180          uint16_t getCrc16(uint8_t *ptr, uint8_t length, uint16_t init_dat)
 181          {
 182   1              uint8_t i = 0;
 183   1              uint16_t j = 0;
 184   1              uint16_t crc16 = init_dat;
 185   1      
 186   1              for (i = 0; i < length; i++)
 187   1              {
 188   2                      crc16 ^= *ptr++;
 189   2      
 190   2                      for (j = 0; j < 8; j++)
 191   2                      {
 192   3                              if (crc16 & 0x0001)
 193   3                              {
 194   4                                      crc16 = (crc16 >> 1) ^ 0xa001;
 195   4                              }
 196   3                              else
 197   3                              {
 198   4                                      crc16 = crc16 >> 1;
 199   4                              }
 200   3                      }
 201   2              }
 202   1              return (crc16);
 203   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    821    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   3538      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

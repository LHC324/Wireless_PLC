C51 COMPILER V9.60.0.0   WIFI                                                              03/03/2023 11:28:24 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE WIFI
OBJECT MODULE PLACED IN .\Objects\wifi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\wifi.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include;.\FreeModBu
                    -s\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\wifi.lst) OBJECT(.\Objects\wifi.obj)

line level    source

   1          /********************************************************************
   2           **--------------Êñá‰ª∂‰ø°ÊÅØ---------------------------------------------
   3           **Êñá   ‰ª∂   ÂêçÔºöwifi.h
   4           **Âàõ Âª∫  Êó• ÊúüÔºö2019Âπ¥3Êúà1Êó•
   5           **ÊúÄÂêé‰øÆÊîπÊó•ÊúüÔºö
   6           **Áâà ÊùÉ ‰ø°  ÊÅØ: ‰∫ëÂçóÂÖÜÂØåÁßëÊäÄÊúâÈôêÂÖ¨Âè∏
   7           **Á®ã   Â∫è   ÂëòÔºöÂº†‰∏úÊµ∑
   8           **Áâà   Êú¨   Âè∑ÔºöV1.0
   9           **Êèè        Ëø∞ÔºöWIFIÈ©±Âä®Á®ãÂ∫èÔºàRAK425Ôºâ
  10           **‰øÆ Êîπ Êó•  Âøó:
  11           *********************************************************************/
  12          
  13          #include "wifi.h"
  14          #include "systemTimer.h"
  15          #include "usart.h"
  16          
  17          
  18          /*USR-C210Ê®°ÂùóATÊåá‰ª§ÂàóË°®*/
  19          const AT_Command code Wifi_Cmd[] =
  20          {
  21                  /*WIFIÊ®°ÂùóÊé®Âá∫ÈÄè‰º†Ê®°ÂºèËøõÂÖ•ATÊåá‰ª§Ê®°Âºè*/
  22                  {"+++", "a", 1000U,  NULL},
  23                  /*WIFIÊ®°ÂùóÂìçÂ∫îÂêéÔºå‰∏ªÂä®ÂèëÈÄÅ‚Äùa‚Äú*/
  24                  {"a",   "+Ok", 200U, NULL},
  25                  /*ÂÖ≥Èó≠ÂõûÊòæ*/ 
  26                  //{"AT+E=OFF\r\n", "+OK", 500},           
  27                  /*ÊòæÁ§∫SSID*/ 
  28                  //{"AT+HSSID = OFF\r\n", "+OK", 500}, 
  29                  /*WIFIÂ∑•‰ΩúÊ®°ÂºèÔºöAP + STA*/ 
  30                  {AP_STA_MODE, "+OK", 200U, NULL},        
  31                  /*ËÆæÁΩÆË∑ØÁî±Âô®ÂêçÁß∞*/ 
  32                  {AP_NAME, "+OK", 200U, NULL},
  33                  /*ËÆæÁΩÆÂøÉË∑≥Êï∞ÊçÆ:www.ynpax.com*/ 
  34                  {"AT+HEARTDT=7777772E796E7061782E636F6D\r\n", "+OK", 200U, NULL},   
  35                  /*SSIDÂíåÂØÜÁ†Å‰∏çËÉΩÁ®ãÂ∫èËæìÂÖ•ÔºåÈúÄË¶ÅÂú®Áé∞Âú∫Ê†πÊçÆÁî®Êà∑ÊñπÁöÑWIFIËÆæÁΩÆÈÄöËøáWEBÊñπÂºè‰øÆÊîπ*/
  36                  /*ËÆæÁΩÆWIFIÁôªÂΩïSSIDÔºåÂØÜÁ†Å*/ 
  37                  {"AT+WSTA=LHC,66666666\r\n", "+OK", 200U, NULL}, 
  38                  /*ÈÄè‰º†‰∫ëËÆæÁΩÆ*/       
  39                  {"AT+REGENA=CLOUD,FIRST\r\n", "+OK", 200U, NULL},
  40                  /*ËÆæÁΩÆSTOCKAÂèÇÊï∞*/
  41                  {"AT+SOCKA=TCPC,cloud.usr.cn,15000\r\n", "+OK", 200U, NULL},
  42                  /*ËÆæÁΩÆÊêúÁ¥¢ÊúçÂä°Âô®ÂíåÁ´ØÂè£*/
  43                  {"AT+SEARCH=15000,cloud.usr.cn\r\n", "+OK", 200U, NULL},
  44                  /*ÈÄè‰º†‰∫ëIDÔºåÈÄè‰º†‰∫ëÂØÜÁ†Å*/  
  45                  {CLOUD_ID, "+OK", 200U, NULL},
  46                  /*ËÆæÁΩÆDHCP*/ 
  47                  {"AT+WANN=DHCP\r\n", "+OK", 200U, NULL},
  48                  /*ËΩØ‰ª∂ÈáçÂêØUSR-C210*/
  49                  {"AT+Z\r\n", "+OK", 200U, NULL},  
  50                  /*ËÆæÁΩÆÈÄè‰º†Ê®°Âºè*/     
  51                  // {"AT+ENTM\r\n", "+OK", 50U, NULL}    
  52          };
  53          
  54          #define WIFI_CMDSIZE sizeof(Wifi_Cmd) / sizeof(AT_Command)
C51 COMPILER V9.60.0.0   WIFI                                                              03/03/2023 11:28:24 PAGE 2   

  55          
  56          /**
  57           * @brief       WIFIÊ®°ÂùóÂêØÂÅú
  58           * @details     
  59           * @param       status:Áä∂ÊÄÅ
  60           * @retval      None
  61           */
  62          void Wifi_Enable(uint8_t status)
  63          {
  64   1              switch(status)
  65   1              {
  66   2                      case true:
  67   2                      {
  68   3                              WIFI_RESET  = 1;
  69   3                      }break;
  70   2                      case false:
  71   2                      {
  72   3                              WIFI_RESET  = 0;
  73   3                      }break;
  74   2                      default : break;
  75   2              }
  76   1      }
  77          
  78          /**
  79           * @brief       ÂàùÂßãÂåñWIFIÊ®°Âùó
  80           * @details     WIFIÊ®°ÂùóÂ§ç‰ΩçÈúÄË¶Å‰∏ÄÂÆöÂª∂Êó∂ÔºõÂú®ÈÄÄÂá∫ÈÄè‰º†Ê®°ÂºèÊó∂Âª∂Êó∂ÂøÖÈ°ª>500ms,ÊØèÊù°Êåá‰ª§Èó
             -¥Èó¥ÈöîÂøÖÈ°ª>100ms
  81           * @param       None
  82           * @retval      None
  83           */
  84          void Wifi_Init(void)
  85          {
  86   1              uint8_t i = 0;
  87   1      
  88   1              /*WIFIÁ°¨‰ª∂ÂºïËÑö‰∏çÂ§ç‰Ωç*/
  89   1              WIFI_RESET  = 1;
  90   1              WIFI_RELOAD = 1;
  91   1              /*Á≠âÂæÖÊ®°ÂùóÂ§ç‰Ωç*/
  92   1              Delay_ms(500);
  93   1      
  94   1              for(i = 0; i < WIFI_CMDSIZE; i++)
  95   1              {
  96   2                      // Uartx_SendStr(&Uart2, (uint8_t *)Wifi_Cmd[i].pSend, strlen(Wifi_Cmd[i].pSend));
  97   2                      // /*ÊâßË°åÂØπÂ∫îÁöÑÁ≠âÂæÖÊó∂Èó¥*/
  98   2                      // Delay_ms(Wifi_Cmd[i].WaitTimes);
  99   2                      Exe_Appoint_Cmd((uint8_t *)Wifi_Cmd[i].pSend, Wifi_Cmd[i].WaitTimes);
 100   2              }
 101   1      }
 102          
 103          /**
 104           * @brief       WIFIÊ®°ÂùóÊâßË°åÊåá‰ª§Ë°®‰∏≠ÁâπÂÆöÊåá‰ª§
 105           * @details     
 106           * @param       None
 107           * @retval      None
 108           */
 109          static void Exe_Appoint_Cmd(uint8_t *str, uint16_t times)
 110          {
 111   1              if((str != NULL) && (times))
 112   1              {
 113   2                      Uartx_SendStr(&Uart2, str, strlen(str));
 114   2                      Delay_ms(times);
 115   2              }
C51 COMPILER V9.60.0.0   WIFI                                                              03/03/2023 11:28:24 PAGE 3   

 116   1      }
 117          
 118          
 119          /**
 120           * @brief       WIFIÊ®°ÂùóÈÄÄÂá∫ÈÄè‰º†Ê®°Âºè
 121           * @details     
 122           * @param       None
 123           * @retval      None
 124           */
 125          static void Wifi_Exit_Trt(void)
 126          {
 127   1              
 128   1              uint8_t i = 0;
 129   1      
 130   1              for(i = 0; i < 2U; i++)
 131   1              {
 132   2                      if((Wifi_Cmd[i].pSend != '\0') && (Wifi_Cmd[i].WaitTimes))
 133   2                      {
 134   3                              // Uartx_SendStr(&Uart2, (uint8_t *)Wifi_Cmd[i].pSend, strlen(Wifi_Cmd[i].pSend));
 135   3                              // /*ÊâßË°åÂØπÂ∫îÁöÑÁ≠âÂæÖÊó∂Èó¥*/
 136   3                              // Delay_ms(Wifi_Cmd[i].WaitTimes);
 137   3                              Exe_Appoint_Cmd((uint8_t *)Wifi_Cmd[i].pSend, Wifi_Cmd[i].WaitTimes);
 138   3                      }
 139   2              }
 140   1      }
 141          
 142          /**
 143           * @brief       ÊâìÂºÄWIFIÊ®°ÂùóÁÉ≠ÁÇπ
 144           * @details     
 145           * @param       None
 146           * @retval      None
 147           */
 148          void Wifi_Open_Ap(void)
 149          {
 150   1              /*ÈÄÄÂá∫ÈÄè‰º†Ê®°Âºè*/
 151   1              Wifi_Exit_Trt();
 152   1              /*ÂèëÈÄÅÈÖçÁΩÆÊåá‰ª§*/
 153   1              Exe_Appoint_Cmd(AP_STA_MODE, 200);
 154   1              /*ËøõÂÖ•ÈÄè‰º†Ê®°Âºè*/
 155   1              Exe_Appoint_Cmd(ENTM_CMD, 200);
 156   1              /*ÈáçÂêØÊ®°Âùó*/
 157   1              Exe_Appoint_Cmd(RESTART_CMD, 200);
 158   1      }
 159          
 160          /**
 161           * @brief       ÂÖ≥Èó≠WIFIÊ®°ÂùóÁÉ≠ÁÇπ
 162           * @details     
 163           * @param       None
 164           * @retval      None
 165           */
 166          void Wifi_Close_Ap(void)
 167          {       
 168   1              /*ÈÄÄÂá∫ÈÄè‰º†Ê®°Âºè*/
 169   1              Wifi_Exit_Trt();
 170   1              /*ÂèëÈÄÅÈÖçÁΩÆÊåá‰ª§*/
 171   1              Exe_Appoint_Cmd(STA_MODE, 200);
 172   1              /*ËøõÂÖ•ÈÄè‰º†Ê®°Âºè*/
 173   1              Exe_Appoint_Cmd(ENTM_CMD, 200);
 174   1              /*ÈáçÂêØÊ®°Âùó*/
 175   1              Exe_Appoint_Cmd(RESTART_CMD, 200);
 176   1      }

C51 COMPILER V9.60.0.0   WIFI                                                              03/03/2023 11:28:24 PAGE 4   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    303    ----
   CONSTANT SIZE    =    415    ----
   XDATA SIZE       =   ----       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

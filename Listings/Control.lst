C51 COMPILER V9.60.0.0   CONTROL                                                           12/22/2021 16:04:16 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CONTROL
OBJECT MODULE PLACED IN .\Objects\Control.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\Control.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include;.\FreeMo
                    -dBus\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\Control.lst) OBJECT(.\Objects\Control.obj)

line level    source

   1          #include "Control.h"
   2          
   3          extern uint16_t getCrc16(const uint8_t *ptr, uint8_t length, uint16_t IniDat);
   4          extern void Uart1SendStr(unsigned char *p, unsigned char length);
   5          //*************************密码变量****************************
   6          
   7          SYSTEM_PARAMETER PassWordI; //输入密码
   8          //默认密码将在校验无误的情况下存到System_Parameter.PSWNext.PassWordbuff
   9          
  10          SYSTEM_PARAMETER PassWordChange1; //修改密码1
  11          SYSTEM_PARAMETER PassWordChange2; //修改密码2
  12          
  13          // PASSWORDSTRUCT PassWordChange1 = {0, false, false, {0}}; //修改密码1
  14          // PASSWORDSTRUCT PassWordChange2 = {0, false, false, {0}}; //修改密码2
  15          //*************************************************************
  16          
  17          /*****************波特率变量*********************************/
  18          BAUDSTRUCT Baudlist[] =
  19          {
  20                          {0, BRT_1T(BAUD_2400),   " 2400 "},
  21                          {1, BRT_1T(BAUD_4800),   " 4800 "},
  22                          {2, BRT_1T(BAUD_9600),   " 9600 "},
  23                          {3, BRT_1T(BAUD_14400),  "14400 "},
  24                          {4, BRT_1T(BAUD_19200),  "19200 "},
  25                          {5, BRT_1T(BAUD_38400),  "38400 "},
  26                          {6, BRT_1T(BAUD_56000),  "56000 "},
  27                          {7, BRT_1T(BAUD_57600),  "57600 "},
  28                          {8, BRT_1T(BAUD_115200), "115200"},
  29                          {9, BRT_1T(BAUD_921600), "921600"},
  30          };
  31          
  32          uint8_t G_BaudList_Size = (sizeof(Baudlist) / sizeof(BAUDSTRUCT));
  33          /************************************************************/
  34          
  35          /*热点设置*/
  36          APSTRUCT Aplist[] =
  37          {
  38                  {"打开", Wifi_Open_Ap},
  39                  {"关闭", Wifi_Close_Ap}
  40          };
  41          uint8_t G_Aplist_Size = (sizeof(Aplist) / sizeof(APSTRUCT));
  42          
  43          /*工作模式设置*/
  44          MODESTRUCT Modelist[] =
  45          {
  46                  {"主机", Mode_Master},
  47                  {"从机", Mode_Slave}
  48          };
  49          uint8_t G_Modelist_Size = (sizeof(Modelist) / sizeof(MODESTRUCT));
  50          
  51          OBJCTSTRUCT Objlist[] = 
  52          {
  53                  {"Ethernet"},
  54                  {"WIFI/4G"},
C51 COMPILER V9.60.0.0   CONTROL                                                           12/22/2021 16:04:16 PAGE 2   

  55                  {"RS485"}
  56          };
  57          uint8_t G_Objlist_Size = (sizeof(Objlist) / sizeof(OBJCTSTRUCT));
  58          
  59          void ControlInit(void)
  60          {
  61   1              /*缺省控件类型*/
  62   1              System_Parameter.PSWNext.First_Input_Flag = false;
  63   1              BaudInit();              //串口3波特率初始化
  64   1              PowerInit();     //开关初始化
  65   1              CommunicaInit(); //通信初始化
  66   1              /*初始化临时副本*/
  67   1              SYS_TEMP_PARA.WorkMode = System_Parameter.WorkMode;
  68   1      }
  69          
  70          void CommunicaInit(void)
  71          {       /*默认为本地连接方式*/
  72   1              /*初始连接状态*/
  73   1      //      LTEenable(CommunciaType);
  74   1          Wifi_Enable(System_Parameter.CommunicationType);
  75   1      }
  76          
  77          void PowerInit(void)
  78          {       /*PLC初始运行状态*/
  79   1              RUNKEY = System_Parameter.PlcState; //默认为STOP
  80   1      }
  81          
  82          void BaudInit(void)
  83          {       /*默认波特率为9600*/
  84   1              /*波特率预选索引,操作的是波特率选项界面*/
  85   1              SET_BRT1(1, Baudlist[System_Parameter.BaudIndex[0]].BaudValue);
  86   1              SET_BRT1(2, Baudlist[System_Parameter.BaudIndex[1]].BaudValue);
  87   1              SET_BRT1(3, Baudlist[System_Parameter.BaudIndex[2]].BaudValue);
  88   1              SET_BRT1(4, Baudlist[System_Parameter.BaudIndex[3]].BaudValue);
  89   1      }
  90          
  91          /**
  92           * @brief       密码输入
  93           * @details     
  94           * @param       operation：操作类型
  95           * @param       Password：密码对象
  96           * @retval      当前索引下密码值
  97           */
  98          uint8_t PassWordInput(uint8_t operation, SYSTEM_PARAMETER *Password) //密码输入
  99          {
 100   1              /*解决初始时密码错乱*/
 101   1              if (Password->PSWNext.PassWordbuff[Password->PSWNext.Index] == 0xFF)
 102   1              {
 103   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] = 0;
 104   2              }
 105   1              if (operation == ADD)
 106   1              {
 107   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index]++;
 108   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] %= 10;
 109   2              }
 110   1              else
 111   1              {
 112   2                      if (Password->PSWNext.PassWordbuff[Password->PSWNext.Index] == 0)
 113   2                      {
 114   3                              Password->PSWNext.PassWordbuff[Password->PSWNext.Index] = 10;
 115   3                      }
 116   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index]--;
C51 COMPILER V9.60.0.0   CONTROL                                                           12/22/2021 16:04:16 PAGE 3   

 117   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] %= 10;
 118   2              }
 119   1              return Password->PSWNext.PassWordbuff[Password->PSWNext.Index]; //显示
 120   1      }
 121          
 122          
 123          /**
 124           * @brief       输入密码核对
 125           * @details     
 126           * @param       PasswordA：密码A
 127           * @param       PasswordB：密码B
 128           * @retval      true/false
 129           */
 130          uint8_t PassWordjudge(SYSTEM_PARAMETER PasswordA, SYSTEM_PARAMETER PasswordB) //密码判断
 131          {
 132   1              /*密码正确*/
 133   1              if (!strncmp(PasswordA.PSWNext.PassWordbuff, PasswordB.PSWNext.PassWordbuff, PASSWORDBITS))
 134   1                      return true;
 135   1              else
 136   1                      return false;
 137   1      }
 138          
 139          void PassWordDelete(SYSTEM_PARAMETER *Password)
 140          {
 141   1              memset(Password->PSWNext.PassWordbuff, 0xFF, sizeof(Password->PSWNext.PassWordbuff));
 142   1              Password->PSWNext.Index = 0;
 143   1      }
 144          
 145          void InputOffect(SYSTEM_PARAMETER *Password)
 146          {
 147   1              Password->PSWNext.Index++;
 148   1              if(Password->PSWNext.Index == PASSWORDBITS)
 149   1              {       /*密码输入为有效位数*/
 150   2                      System_Parameter.PSWNext.Bit_Efficient_Flag = true;
 151   2              }
 152   1              
 153   1              Password->PSWNext.Index %= PASSWORDBITS;
 154   1      }
 155          
 156          //void PassWordChange(void)              //密码修改
 157          //{
 158          //
 159          //}
 160          
 161          /*屏保显示页面*/
 162          void ScreensaverUiShow(void)
 163          {
 164   1              clear_screen();
 165   1              /*显示南方电网Logo*/
 166   1              GUI_Lattice(0, 0, 192, 64, START_LOGO);
 167   1      }
 168          
 169          void PassWordInputUIShow(void) //输入密码界面进入显示
 170          {
 171   1              clear_screen();
 172   1              GUI_Lattice(0, 8, 81, 50, Logo); //Logo显示
 173   1              GUI_String(100, 15, "请输入密码", CH_12_12);
 174   1      }
 175          
 176          void PassWordChangeUIShow(void) //修改密码界面进入显示
 177          {
 178   1              // PassWordDelete(&PassWordChange1); //清0数据
C51 COMPILER V9.60.0.0   CONTROL                                                           12/22/2021 16:04:16 PAGE 4   

 179   1              // PassWordDelete(&PassWordChange2);
 180   1              uint8_t i;
 181   1          uint8_t temp[2];
 182   1      
 183   1              clear_screen();
 184   1              /*如果是输入第二次密码*/
 185   1              if (System_Parameter.PSWNext.First_Input_Flag)
 186   1              {
 187   2                      /*保留原来的密码*/
 188   2                      for (i = 0; i < PASSWORDBITS; i++) //显示4位密码
 189   2              {
 190   3                  GUI_String(i * 20 + 100, 18, myitoa(PassWordChange1.PSWNext.PassWordbuff[i], temp, 10), EN_5_8
             -);
 191   3              }
 192   2              GUI_Lattice(175, 16, 16, 12, dot);
 193   2              }
 194   1      
 195   1              GUI_String(15, 15, "请输入新密码", CH_12_12);
 196   1              GUI_String(15, 35, "请确认新密码", CH_12_12);
 197   1      }
 198          
 199          void PlcPowerUIshow(void)
 200          {
 201   1              clear_screen();
 202   1      
 203   1              GUI_String(15, 24, "STOP", EN_5_8);
 204   1              GUI_String(150, 24, "RUN", EN_5_8);
 205   1      
 206   1              if (System_Parameter.PlcState == RUN)
 207   1              {
 208   2                      GUI_Lattice(45, 0, 100, 56, PlcRun);
 209   2              }
 210   1              else
 211   1              {
 212   2                      GUI_Lattice(45, 0, 100, 56, PlcStop);
 213   2              }
 214   1      }
 215          
 216          void CommunicaUIshow(void)
 217          {
 218   1              clear_screen();
 219   1              GUI_Lattice(10, System_Parameter.CommunicationType * 30 + 11, 16, 12, finger);
 220   1      
 221   1              GUI_String(30, 10, "关闭无线模块", CH_12_12);
 222   1              GUI_String(30, 40, "打开无线模块", CH_12_12);
 223   1      }
 224          
 225          // void BaudSettingUIshow(void)
 226          // {
 227          //      // clear_screen();
 228          //      // GUI_String(10, 10, "本地串口", CH_12_12);
 229          //      // GUI_String(105, 13, Baudlist[System_Parameter.BaudIndex].pstring, EN_5_8);
 230          //      // GUI_Lattice(149, 13, 5, 8, IconRight);
 231          //      // GUI_Lattice(97, 13, 5, 8, Iconleft);
 232          
 233          //      // GUI_String(10, 40, "远程串口", CH_12_12);
 234          //      // GUI_String(80, 43, "115200(readonly)", EN_5_8);
 235          // }
 236          
 237          void BaudSettingUI1show(void)
 238          {
 239   1              clear_screen();
C51 COMPILER V9.60.0.0   CONTROL                                                           12/22/2021 16:04:16 PAGE 5   

 240   1              GUI_String(10, 29, "以太网", CH_12_12);
 241   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[0]].pstring, EN_5_8);
 242   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 243   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 244   1      }
 245          
 246          void BaudSettingUI2show(void)
 247          {
 248   1              clear_screen();
 249   1              GUI_String(10, 29, "无线网", CH_12_12);
 250   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[1]].pstring, EN_5_8);
 251   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 252   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 253   1      }
 254          
 255          void BaudSettingUI3show(void)
 256          {
 257   1              clear_screen();
 258   1              GUI_String(10, 29, "扩展网", CH_12_12);
 259   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[2]].pstring, EN_5_8);
 260   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 261   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 262   1      }
 263          
 264          void BaudSettingUI4show(void)
 265          {
 266   1              clear_screen();
 267   1              GUI_String(10, 29, "内部网", CH_12_12);
 268   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[3]].pstring, EN_5_8);
 269   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 270   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 271   1      }
 272          
 273          void ReloadSettingUIshow(void)
 274          {
 275   1              clear_screen();
 276   1              GUI_String(48, 20, "是否恢复出厂设置", CH_12_12);
 277   1              GUI_String(10, 48, "是", CH_12_12);
 278   1              GUI_String(172, 48, "否", CH_12_12);
 279   1      }
 280          
 281          void HotspotSettingUIshow(void)
 282          {
 283   1              clear_screen();
 284   1              GUI_String(10,10,"热点", CH_12_12);
 285   1              GUI_String(115,10,Aplist[System_Parameter.Apstate].pstring,CH_12_12);
 286   1              GUI_Lattice(149,13,5,8,IconRight);
 287   1              GUI_Lattice(97,13,5,8,Iconleft);
 288   1                              
 289   1              GUI_String(10,43,"AP ID",EN_5_8);
 290   1              GUI_String(97,43,AP_ID,EN_5_8); 
 291   1      }
 292          
 293          void WorkModeUIshow(void)
 294          {
 295   1              clear_screen();
 296   1              GUI_String(10,10,"模式", CH_12_12);
 297   1              GUI_String(115,10,Modelist[SYS_TEMP_PARA.WorkMode].pstring,CH_12_12);
 298   1              GUI_Lattice(149,13,5,8,IconRight);
 299   1              GUI_Lattice(97,13,5,8,Iconleft);
 300   1                              
 301   1              GUI_String(5,115,"Master-Object",EN_5_8);
C51 COMPILER V9.60.0.0   CONTROL                                                           12/22/2021 16:04:16 PAGE 6   

 302   1              GUI_String(120,115,Objlist[System_Parameter.CurrentSlave].pstring,EN_5_8);      
 303   1      }
 304          
 305          void Mode_Slave(void)
 306          {
 307   1              System_Parameter.WorkMode = SYS_TEMP_PARA.WorkMode;
 308   1              /*从机模式下使能所有请求主机*/
 309   1              REN = 1;
 310   1              S2CON |= S2REN;
 311   1              S3CON |= S3REN;
 312   1      }
 313          
 314          void Mode_Master(void)
 315          {
 316   1              System_Parameter.WorkMode = SYS_TEMP_PARA.WorkMode;
 317   1              /*PLC工作在主站时，默认从站为RS485*/
 318   1              System_Parameter.CurrentSlave = RS485_ID;
 319   1              /*主机模式下关闭多余从机*/
 320   1              REN = 0;
 321   1              S2CON &= 0xEF;
 322   1              S3CON &= 0xEF;
 323   1      }
 324          
 325          /**
 326           * @brief       系统数据存储到EEPROM
 327           * @details     存储数据前为了防止中断打断数据的存储，因该关闭全局中断
 328           * @param       None
 329           * @retval      None
 330           */
 331          void ControlSave(void)
 332          {
 333   1              /*计算出当前有效数据的校验码并存储*/
 334   1              System_Parameter.CRC16 = getCrc16(&System_Parameter.PSWNext.PassWordbuff[0], (sizeof(System_Parameter) - 
             -(sizeof(PASSWORDSTRUCT) - 4U) - 2U), 0xffff);
 335   1              
 336   1              CLOSE_GLOBAL_OUTAGE();
 337   1              /*每次写之前必须进行擦除操作：擦除每次按照512B进行(0x00-0x0200)*/
 338   1              IapErase(START_SAVEADDRESS); 
 339   1              IapWrite_Buff(START_SAVEADDRESS, &System_Parameter.PSWNext.PassWordbuff[0], (sizeof(System_Parameter) - (
             -sizeof(PASSWORDSTRUCT) - 4U)));
 340   1              OPEN_GLOBAL_OUTAGE();
 341   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1341    ----
   CONSTANT SIZE    =    275    ----
   XDATA SIZE       =    154      47
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

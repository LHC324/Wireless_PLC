C51 COMPILER V9.60.0.0   CONTROL                                                           10/28/2021 15:29:44 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CONTROL
OBJECT MODULE PLACED IN .\Objects\Control.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\Control.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\Include;.\FreeM
                    -odBus\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\Control.lst) OBJECT(.\Objects\Control.obj)

line level    source

   1          #include "Control.h"
   2          
   3          extern uint16_t getCrc16(const uint8_t *ptr, uint8_t length, uint16_t IniDat);
   4          extern void Uart1SendStr(unsigned char *p, unsigned char length);
   5          //*************************密码变量****************************
   6          
   7          SYSTEM_PARAMETER PassWordI; //输入密码
   8          //默认密码将在校验无误的情况下存到System_Parameter.PSWNext.PassWordbuff
   9          
  10          SYSTEM_PARAMETER PassWordChange1; //修改密码1
  11          SYSTEM_PARAMETER PassWordChange2; //修改密码2
  12          
  13          // PASSWORDSTRUCT PassWordChange1 = {0, false, false, {0}}; //修改密码1
  14          // PASSWORDSTRUCT PassWordChange2 = {0, false, false, {0}}; //修改密码2
  15          //*************************************************************
  16          
  17          /*****************波特率变量*********************************/
  18          BAUDSTRUCT Baudlist[] =
  19          {
  20                          {0, BRT_1T(BAUD_2400),   " 2400 "},
  21                          {1, BRT_1T(BAUD_4800),   " 4800 "},
  22                          {2, BRT_1T(BAUD_9600),   " 9600 "},
  23                          {3, BRT_1T(BAUD_14400),  "14400 "},
  24                          {4, BRT_1T(BAUD_19200),  "19200 "},
  25                          {5, BRT_1T(BAUD_38400),  "38400 "},
  26                          {6, BRT_1T(BAUD_56000),  "56000 "},
  27                          {7, BRT_1T(BAUD_57600),  "57600 "},
  28                          {8, BRT_1T(BAUD_115200), "115200"},
  29                          {9, BRT_1T(BAUD_921600), "921600"},
  30          };
  31          
  32          uint8_t G_BaudList_Size = (sizeof(Baudlist) / sizeof(BAUDSTRUCT));
  33          /************************************************************/
  34          
  35          void ControlInit(void)
  36          {
  37   1              /*缺省控件类型*/
  38   1              System_Parameter.PSWNext.First_Input_Flag = false;
  39   1              BaudInit();              //串口3波特率初始化
  40   1              PowerInit();     //开关初始化
  41   1              CommunicaInit(); //通信初始化
  42   1      }
  43          
  44          void CommunicaInit(void)
  45          {       /*默认为本地连接方式*/
  46   1              /*初始连接状态*/
  47   1      //      LTEenable(CommunciaType);
  48   1          Wifi_Enable(System_Parameter.CommunicationType);
  49   1      }
  50          
  51          void PowerInit(void)
  52          {       /*PLC初始运行状态*/
  53   1              RUNKEY = System_Parameter.PlcState; //默认为STOP
  54   1      }
C51 COMPILER V9.60.0.0   CONTROL                                                           10/28/2021 15:29:44 PAGE 2   

  55          
  56          void BaudInit(void)
  57          {       /*默认波特率为9600*/
  58   1              /*波特率预选索引,操作的是波特率选项界面*/
  59   1              SET_BRT1(1, Baudlist[System_Parameter.BaudIndex[0]].BaudValue);
  60   1              SET_BRT1(2, Baudlist[System_Parameter.BaudIndex[1]].BaudValue);
  61   1              SET_BRT1(3, Baudlist[System_Parameter.BaudIndex[2]].BaudValue);
  62   1              SET_BRT1(4, Baudlist[System_Parameter.BaudIndex[3]].BaudValue);
  63   1      }
  64          
  65          /**
  66           * @brief       密码输入
  67           * @details     
  68           * @param       operation：操作类型
  69           * @param       Password：密码对象
  70           * @retval      当前索引下密码值
  71           */
  72          uint8_t PassWordInput(uint8_t operation, SYSTEM_PARAMETER *Password) //密码输入
  73          {
  74   1              /*解决初始时密码错乱*/
  75   1              if (Password->PSWNext.PassWordbuff[Password->PSWNext.Index] == 0xFF)
  76   1              {
  77   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] = 0;
  78   2              }
  79   1              if (operation == ADD)
  80   1              {
  81   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index]++;
  82   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] %= 10;
  83   2              }
  84   1              else
  85   1              {
  86   2                      if (Password->PSWNext.PassWordbuff[Password->PSWNext.Index] == 0)
  87   2                      {
  88   3                              Password->PSWNext.PassWordbuff[Password->PSWNext.Index] = 10;
  89   3                      }
  90   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index]--;
  91   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] %= 10;
  92   2              }
  93   1              return Password->PSWNext.PassWordbuff[Password->PSWNext.Index]; //显示
  94   1      }
  95          
  96          
  97          /**
  98           * @brief       输入密码核对
  99           * @details     
 100           * @param       PasswordA：密码A
 101           * @param       PasswordB：密码B
 102           * @retval      true/false
 103           */
 104          uint8_t PassWordjudge(SYSTEM_PARAMETER PasswordA, SYSTEM_PARAMETER PasswordB) //密码判断
 105          {
 106   1              /*密码正确*/
 107   1              if (!strncmp(PasswordA.PSWNext.PassWordbuff, PasswordB.PSWNext.PassWordbuff, PASSWORDBITS))
 108   1                      return true;
 109   1              else
 110   1                      return false;
 111   1      }
 112          
 113          void PassWordDelete(SYSTEM_PARAMETER *Password)
 114          {
 115   1              memset(Password->PSWNext.PassWordbuff, 0xFF, sizeof(Password->PSWNext.PassWordbuff));
 116   1              Password->PSWNext.Index = 0;
C51 COMPILER V9.60.0.0   CONTROL                                                           10/28/2021 15:29:44 PAGE 3   

 117   1      }
 118          
 119          void InputOffect(SYSTEM_PARAMETER *Password)
 120          {
 121   1              Password->PSWNext.Index++;
 122   1              if(Password->PSWNext.Index == PASSWORDBITS)
 123   1              {       /*密码输入为有效位数*/
 124   2                      System_Parameter.PSWNext.Bit_Efficient_Flag = true;
 125   2              }
 126   1              
 127   1              Password->PSWNext.Index %= PASSWORDBITS;
 128   1      }
 129          
 130          //void PassWordChange(void)              //密码修改
 131          //{
 132          //
 133          //}
 134          
 135          /*屏保显示页面*/
 136          void ScreensaverUiShow(void)
 137          {
 138   1              clear_screen();
 139   1              /*显示南方电网Logo*/
 140   1              GUI_Lattice(0, 0, 192, 64, PowerGrid_Image);
 141   1      }
 142          
 143          void PassWordInputUIShow(void) //输入密码界面进入显示
 144          {
 145   1              clear_screen();
 146   1              GUI_Lattice(0, 8, 81, 50, Logo); //Logo显示
 147   1              GUI_String(100, 15, "请输入密码", CH_12_12);
 148   1      }
 149          
 150          void PassWordChangeUIShow(void) //修改密码界面进入显示
 151          {
 152   1              // PassWordDelete(&PassWordChange1); //清0数据
 153   1              // PassWordDelete(&PassWordChange2);
 154   1              uint8_t i;
 155   1          uint8_t temp[2];
 156   1      
 157   1              clear_screen();
 158   1              /*如果是输入第二次密码*/
 159   1              if (System_Parameter.PSWNext.First_Input_Flag)
 160   1              {
 161   2                      /*保留原来的密码*/
 162   2                      for (i = 0; i < PASSWORDBITS; i++) //显示4位密码
 163   2              {
 164   3                  GUI_String(i * 20 + 100, 18, myitoa(PassWordChange1.PSWNext.PassWordbuff[i], temp, 10), EN_5_8
             -);
 165   3              }
 166   2              GUI_Lattice(175, 16, 16, 12, dot);
 167   2              }
 168   1      
 169   1              GUI_String(15, 15, "请输入新密码", CH_12_12);
 170   1              GUI_String(15, 35, "请确认新密码", CH_12_12);
 171   1      }
 172          
 173          void PlcPowerUIshow(void)
 174          {
 175   1              clear_screen();
 176   1      
 177   1              GUI_String(15, 24, "STOP", EN_5_8);
C51 COMPILER V9.60.0.0   CONTROL                                                           10/28/2021 15:29:44 PAGE 4   

 178   1              GUI_String(150, 24, "RUN", EN_5_8);
 179   1      
 180   1              if (System_Parameter.PlcState == RUN)
 181   1              {
 182   2                      GUI_Lattice(45, 0, 100, 56, PlcRun);
 183   2              }
 184   1              else
 185   1              {
 186   2                      GUI_Lattice(45, 0, 100, 56, PlcStop);
 187   2              }
 188   1      }
 189          
 190          void CommunicaUIshow(void)
 191          {
 192   1              clear_screen();
 193   1              GUI_Lattice(10, System_Parameter.CommunicationType * 30 + 11, 16, 12, finger);
 194   1      
 195   1              GUI_String(30, 10, "关闭无线模块", CH_12_12);
 196   1              GUI_String(30, 40, "打开无线模块", CH_12_12);
 197   1      }
 198          
 199          // void BaudSettingUIshow(void)
 200          // {
 201          //      // clear_screen();
 202          //      // GUI_String(10, 10, "本地串口", CH_12_12);
 203          //      // GUI_String(105, 13, Baudlist[System_Parameter.BaudIndex].pstring, EN_5_8);
 204          //      // GUI_Lattice(149, 13, 5, 8, IconRight);
 205          //      // GUI_Lattice(97, 13, 5, 8, Iconleft);
 206          
 207          //      // GUI_String(10, 40, "远程串口", CH_12_12);
 208          //      // GUI_String(80, 43, "115200(readonly)", EN_5_8);
 209          // }
 210          
 211          void BaudSettingUI1show(void)
 212          {
 213   1              clear_screen();
 214   1              GUI_String(10, 29, "以太网", CH_12_12);
 215   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[0]].pstring, EN_5_8);
 216   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 217   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 218   1      }
 219          
 220          void BaudSettingUI2show(void)
 221          {
 222   1              clear_screen();
 223   1              GUI_String(10, 29, "无线网", CH_12_12);
 224   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[1]].pstring, EN_5_8);
 225   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 226   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 227   1      }
 228          
 229          void BaudSettingUI3show(void)
 230          {
 231   1              clear_screen();
 232   1              GUI_String(10, 29, "扩展网", CH_12_12);
 233   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[2]].pstring, EN_5_8);
 234   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 235   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 236   1      }
 237          
 238          void BaudSettingUI4show(void)
 239          {
C51 COMPILER V9.60.0.0   CONTROL                                                           10/28/2021 15:29:44 PAGE 5   

 240   1              clear_screen();
 241   1              GUI_String(10, 29, "内部网", CH_12_12);
 242   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[3]].pstring, EN_5_8);
 243   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 244   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 245   1      }
 246          
 247          void ReloadSettingUIshow(void)
 248          {
 249   1              clear_screen();
 250   1              GUI_String(48, 20, "是否恢复出厂设置", CH_12_12);
 251   1              GUI_String(10, 48, "是", CH_12_12);
 252   1              GUI_String(172, 48, "否", CH_12_12);
 253   1      }
 254          
 255          /**
 256           * @brief       系统数据存储到EEPROM
 257           * @details     存储数据前为了防止中断打断数据的存储，因该关闭全局中断
 258           * @param       None
 259           * @retval      None
 260           */
 261          void ControlSave(void)
 262          {
 263   1              /*计算出当前有效数据的校验码并存储*/
 264   1              System_Parameter.CRC16 = getCrc16(&System_Parameter.PSWNext.PassWordbuff[0], (sizeof(System_Parameter) - 
             -(sizeof(PASSWORDSTRUCT) - 4U) - 2U), 0xffff);
 265   1              
 266   1              CLOSE_GLOBAL_OUTAGE();
 267   1              /*每次写之前必须进行擦除操作：擦除每次按照512B进行(0x00-0x0200)*/
 268   1              IapErase(START_SAVEADDRESS); 
 269   1              IapWrite_Buff(START_SAVEADDRESS, &System_Parameter.PSWNext.PassWordbuff[0], (sizeof(System_Parameter) - (
             -sizeof(PASSWORDSTRUCT) - 4U)));
 270   1              OPEN_GLOBAL_OUTAGE();
 271   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1088    ----
   CONSTANT SIZE    =    193    ----
   XDATA SIZE       =    109      41
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

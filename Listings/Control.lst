C51 COMPILER V9.60.0.0   CONTROL                                                           10/27/2021 17:42:56 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CONTROL
OBJECT MODULE PLACED IN .\Objects\Control.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\Control.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\Include;.\FreeM
                    -odBus\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\Control.lst) OBJECT(.\Objects\Control.obj)

line level    source

   1          #include "Control.h"
   2          
   3          extern uint16_t getCrc16(const uint8_t *ptr, uint8_t length, uint16_t IniDat);
   4          extern void Uart1SendStr(unsigned char *p, unsigned char length);
   5          CONTROL_TYPE ControlType; //控件类型
   6          
   7          //*************************密码变量****************************
   8          
   9          SYSTEM_PARAMETER PassWordI; //输入密码
  10          //默认密码将在校验无误的情况下存到System_Parameter.PSWNext.PassWordbuff
  11          
  12          SYSTEM_PARAMETER PassWordChange1; //修改密码1
  13          SYSTEM_PARAMETER PassWordChange2; //修改密码2
  14          
  15          uint8_t PassWordFirstChangeFlag = false; //输入新密码完成第一次
  16          //*************************************************************
  17          
  18          /*****************波特率变量*********************************/
  19          BAUDSTRUCT Baudlist[] =
  20          {
  21                          {0, BRT_1T(BAUD_2400),   " 2400 "},
  22                          {1, BRT_1T(BAUD_4800),   " 4800 "},
  23                          {2, BRT_1T(BAUD_9600),   " 9600 "},
  24                          {3, BRT_1T(BAUD_14400),  "14400 "},
  25                          {4, BRT_1T(BAUD_19200),  "19200 "},
  26                          {5, BRT_1T(BAUD_38400),  "38400 "},
  27                          {6, BRT_1T(BAUD_56000),  "56000 "},
  28                          {7, BRT_1T(BAUD_57600),  "57600 "},
  29                          {8, BRT_1T(BAUD_115200), "115200"},
  30                          {9, BRT_1T(BAUD_921600), "921600"},
  31          };
  32          
  33          uint8_t G_BaudList_Size = (sizeof(Baudlist) / sizeof(BAUDSTRUCT));
  34          /************************************************************/
  35          
  36          void ControlInit(void)
  37          {
  38   1              /*缺省控件类型*/
  39   1              ControlType = CONTROL_SCREENSAVE;
  40   1              PassWordFirstChangeFlag = false;
  41   1              BaudInit();              //串口3波特率初始化
  42   1              PowerInit();     //开关初始化
  43   1              CommunicaInit(); //通信初始化
  44   1      }
  45          
  46          void CommunicaInit(void)
  47          {       /*默认为本地连接方式*/
  48   1              /*初始连接状态*/
  49   1      //      LTEenable(CommunciaType);
  50   1          Wifi_Enable(System_Parameter.CommunicationType);
  51   1      }
  52          
  53          void PowerInit(void)
  54          {       /*PLC初始运行状态*/
C51 COMPILER V9.60.0.0   CONTROL                                                           10/27/2021 17:42:56 PAGE 2   

  55   1              RUNKEY = System_Parameter.PlcState; //默认为STOP
  56   1      }
  57          
  58          void BaudInit(void)
  59          {       /*默认波特率为9600*/
  60   1              /*波特率预选索引,操作的是波特率选项界面*/
  61   1              SET_BRT1(1, Baudlist[System_Parameter.BaudIndex[0]].BaudValue);
  62   1              SET_BRT1(2, Baudlist[System_Parameter.BaudIndex[1]].BaudValue);
  63   1              SET_BRT1(3, Baudlist[System_Parameter.BaudIndex[2]].BaudValue);
  64   1              SET_BRT1(4, Baudlist[System_Parameter.BaudIndex[3]].BaudValue);
  65   1      }
  66          
  67          /**
  68           * @brief       密码输入
  69           * @details     
  70           * @param       operation：操作类型
  71           * @param       Password：密码对象
  72           * @retval      当前索引下密码值
  73           */
  74          uint8_t PassWordInput(uint8_t operation, SYSTEM_PARAMETER *Password) //密码输入
  75          {
  76   1              if (operation == ADD)
  77   1              {
  78   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index]++;
  79   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] %= 10;
  80   2              }
  81   1              else
  82   1              {
  83   2                      if (Password->PSWNext.PassWordbuff[Password->PSWNext.Index] == 0)
  84   2                      {
  85   3                              Password->PSWNext.PassWordbuff[Password->PSWNext.Index] = 10;
  86   3                      }
  87   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index]--;
  88   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] %= 10;
  89   2              }
  90   1              return Password->PSWNext.PassWordbuff[Password->PSWNext.Index]; //显示
  91   1      }
  92          
  93          
  94          /**
  95           * @brief       输入密码核对
  96           * @details     
  97           * @param       PasswordA：密码A
  98           * @param       PasswordB：密码B
  99           * @retval      true/false
 100           */
 101          uint8_t PassWordjudge(SYSTEM_PARAMETER PasswordA, SYSTEM_PARAMETER PasswordB) //密码判断
 102          {
 103   1              /*密码正确*/
 104   1              if (!strncmp(PasswordA.PSWNext.PassWordbuff, PasswordB.PSWNext.PassWordbuff, PASSWORDBITS))
 105   1                      return true;
 106   1              else
 107   1                      return false;
 108   1      }
 109          
 110          void PassWordDelete(SYSTEM_PARAMETER *Password)
 111          {
 112   1              memset(Password->PSWNext.PassWordbuff, 0, sizeof(Password->PSWNext.PassWordbuff));
 113   1              Password->PSWNext.Index = 0;
 114   1      }
 115          
 116          void InputOffect(SYSTEM_PARAMETER *Password)
C51 COMPILER V9.60.0.0   CONTROL                                                           10/27/2021 17:42:56 PAGE 3   

 117          {
 118   1              Password->PSWNext.Index++;
 119   1              Password->PSWNext.Index %= PASSWORDBITS;
 120   1      }
 121          
 122          //void PassWordChange(void)              //密码修改
 123          //{
 124          //
 125          //}
 126          
 127          /*屏保显示页面*/
 128          void ScreensaverUiShow(void)
 129          {
 130   1              clear_screen();
 131   1              /*显示南方电网Logo*/
 132   1              GUI_Lattice(0, 0, 192, 64, PowerGrid_Image);
 133   1      }
 134          
 135          void PassWordInputUIShow(void) //输入密码界面进入显示
 136          {
 137   1              clear_screen();
 138   1              GUI_Lattice(0, 8, 81, 50, Logo); //Logo显示
 139   1              GUI_String(100, 15, "请输入密码", CH_12_12);
 140   1      }
 141          
 142          void PassWordChangeUIShow(void) //修改密码界面进入显示
 143          {
 144   1              PassWordDelete(&PassWordChange1); //清0数据
 145   1              PassWordDelete(&PassWordChange2);
 146   1      
 147   1              clear_screen();
 148   1              GUI_String(15, 15, "请输入新密码", CH_12_12);
 149   1              GUI_String(15, 35, "请确认新密码", CH_12_12);
 150   1      }
 151          
 152          void PlcPowerUIshow(void)
 153          {
 154   1              clear_screen();
 155   1      
 156   1              GUI_String(15, 24, "STOP", EN_5_8);
 157   1              GUI_String(150, 24, "RUN", EN_5_8);
 158   1      
 159   1              if (System_Parameter.PlcState == RUN)
 160   1              {
 161   2                      GUI_Lattice(45, 0, 100, 56, PlcRun);
 162   2              }
 163   1              else
 164   1              {
 165   2                      GUI_Lattice(45, 0, 100, 56, PlcStop);
 166   2              }
 167   1      }
 168          
 169          void CommunicaUIshow(void)
 170          {
 171   1              clear_screen();
 172   1              GUI_Lattice(10, System_Parameter.CommunicationType * 30 + 11, 16, 12, finger);
 173   1      
 174   1              GUI_String(30, 10, "本地连接", CH_12_12);
 175   1              GUI_String(30, 40, "远程连接", CH_12_12);
 176   1      }
 177          
 178          // void BaudSettingUIshow(void)
C51 COMPILER V9.60.0.0   CONTROL                                                           10/27/2021 17:42:56 PAGE 4   

 179          // {
 180          //      // clear_screen();
 181          //      // GUI_String(10, 10, "本地串口", CH_12_12);
 182          //      // GUI_String(105, 13, Baudlist[System_Parameter.BaudIndex].pstring, EN_5_8);
 183          //      // GUI_Lattice(149, 13, 5, 8, IconRight);
 184          //      // GUI_Lattice(97, 13, 5, 8, Iconleft);
 185          
 186          //      // GUI_String(10, 40, "远程串口", CH_12_12);
 187          //      // GUI_String(80, 43, "115200(readonly)", EN_5_8);
 188          // }
 189          
 190          void BaudSettingUI1show(void)
 191          {
 192   1              clear_screen();
 193   1              GUI_String(10, 29, "以太网", CH_12_12);
 194   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[0]].pstring, EN_5_8);
 195   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 196   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 197   1      }
 198          
 199          void BaudSettingUI2show(void)
 200          {
 201   1              clear_screen();
 202   1              GUI_String(10, 29, "无线网", CH_12_12);
 203   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[1]].pstring, EN_5_8);
 204   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 205   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 206   1      }
 207          
 208          void BaudSettingUI3show(void)
 209          {
 210   1              clear_screen();
 211   1              GUI_String(10, 29, "扩展网", CH_12_12);
 212   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[2]].pstring, EN_5_8);
 213   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 214   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 215   1      }
 216          
 217          void BaudSettingUI4show(void)
 218          {
 219   1              clear_screen();
 220   1              GUI_String(10, 29, "内部网", CH_12_12);
 221   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[3]].pstring, EN_5_8);
 222   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 223   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 224   1      }
 225          
 226          void ReloadSettingUIshow(void)
 227          {
 228   1              clear_screen();
 229   1              GUI_String(48, 20, "是否恢复出厂设置", CH_12_12);
 230   1              GUI_String(10, 48, "是", CH_12_12);
 231   1              GUI_String(172, 48, "否", CH_12_12);
 232   1      }
 233          
 234          /**
 235           * @brief       系统数据存储到EEPROM
 236           * @details     存储数据前为了防止中断打断数据的存储，因该关闭全局中断
 237           * @param       None
 238           * @retval      None
 239           */
 240          void ControlSave(void)
C51 COMPILER V9.60.0.0   CONTROL                                                           10/27/2021 17:42:56 PAGE 5   

 241          {
 242   1              /*计算出当前有效数据的校验码并存储*/
 243   1              System_Parameter.CRC16 = getCrc16(&System_Parameter.PSWNext.PassWordbuff[0], (sizeof(System_Parameter) - 
             -3U), 0xffff);
 244   1              
 245   1              CLOSE_GLOBAL_OUTAGE();
 246   1              /*每次写之前必须进行擦除操作：擦除每次按照512B进行(0x00-0x0200)*/
 247   1              IapErase(START_SAVEADDRESS); 
 248   1              IapWrite_Buff(START_SAVEADDRESS, &System_Parameter.PSWNext.PassWordbuff[0], (sizeof(System_Parameter) - 1
             -U));
 249   1              OPEN_GLOBAL_OUTAGE();
 250   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    998    ----
   CONSTANT SIZE    =    185    ----
   XDATA SIZE       =    105      34
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

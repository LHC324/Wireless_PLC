C51 COMPILER V9.60.0.0   CONTROL                                                           12/21/2021 17:57:20 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CONTROL
OBJECT MODULE PLACED IN .\Objects\Control.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\Control.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include;.\FreeMo
                    -dBus\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\Control.lst) OBJECT(.\Objects\Control.obj)

line level    source

   1          #include "Control.h"
   2          
   3          extern uint16_t getCrc16(const uint8_t *ptr, uint8_t length, uint16_t IniDat);
   4          extern void Uart1SendStr(unsigned char *p, unsigned char length);
   5          //*************************密码变量****************************
   6          
   7          SYSTEM_PARAMETER PassWordI; //输入密码
   8          //默认密码将在校验无误的情况下存到System_Parameter.PSWNext.PassWordbuff
   9          
  10          SYSTEM_PARAMETER PassWordChange1; //修改密码1
  11          SYSTEM_PARAMETER PassWordChange2; //修改密码2
  12          
  13          // PASSWORDSTRUCT PassWordChange1 = {0, false, false, {0}}; //修改密码1
  14          // PASSWORDSTRUCT PassWordChange2 = {0, false, false, {0}}; //修改密码2
  15          //*************************************************************
  16          
  17          /*****************波特率变量*********************************/
  18          BAUDSTRUCT Baudlist[] =
  19          {
  20                          {0, BRT_1T(BAUD_2400),   " 2400 "},
  21                          {1, BRT_1T(BAUD_4800),   " 4800 "},
  22                          {2, BRT_1T(BAUD_9600),   " 9600 "},
  23                          {3, BRT_1T(BAUD_14400),  "14400 "},
  24                          {4, BRT_1T(BAUD_19200),  "19200 "},
  25                          {5, BRT_1T(BAUD_38400),  "38400 "},
  26                          {6, BRT_1T(BAUD_56000),  "56000 "},
  27                          {7, BRT_1T(BAUD_57600),  "57600 "},
  28                          {8, BRT_1T(BAUD_115200), "115200"},
  29                          {9, BRT_1T(BAUD_921600), "921600"},
  30          };
  31          
  32          uint8_t G_BaudList_Size = (sizeof(Baudlist) / sizeof(BAUDSTRUCT));
  33          /************************************************************/
  34          
  35          /*热点设置*/
  36          APSTRUCT Aplist[] =
  37          {
  38                  {"打开", Wifi_Open_Ap},
  39                  {"关闭", Wifi_Close_Ap}
  40          };
  41          uint8_t G_Aplist_Size = (sizeof(Aplist) / sizeof(APSTRUCT));
  42          
  43          /*工作模式设置*/
  44          MODESTRUCT Modelist[] =
  45          {
  46                  {"主机", Mode_Master},
  47                  {"从机", Mode_Slave}
  48          };
  49          uint8_t G_Modelist_Size = (sizeof(Modelist) / sizeof(MODESTRUCT));
  50          
  51          OBJCTSTRUCT Objlist[] = 
  52          {
  53                  {"Ethernet"},
  54                  {"WIFI/4G"},
C51 COMPILER V9.60.0.0   CONTROL                                                           12/21/2021 17:57:20 PAGE 2   

  55                  {"RS485"}
  56          };
  57          uint8_t G_Objlist_Size = (sizeof(Objlist) / sizeof(OBJCTSTRUCT));
  58          
  59          void ControlInit(void)
  60          {
  61   1              /*缺省控件类型*/
  62   1              System_Parameter.PSWNext.First_Input_Flag = false;
  63   1              BaudInit();              //串口3波特率初始化
  64   1              PowerInit();     //开关初始化
  65   1              CommunicaInit(); //通信初始化
  66   1      }
  67          
  68          void CommunicaInit(void)
  69          {       /*默认为本地连接方式*/
  70   1              /*初始连接状态*/
  71   1      //      LTEenable(CommunciaType);
  72   1          Wifi_Enable(System_Parameter.CommunicationType);
  73   1      }
  74          
  75          void PowerInit(void)
  76          {       /*PLC初始运行状态*/
  77   1              RUNKEY = System_Parameter.PlcState; //默认为STOP
  78   1      }
  79          
  80          void BaudInit(void)
  81          {       /*默认波特率为9600*/
  82   1              /*波特率预选索引,操作的是波特率选项界面*/
  83   1              SET_BRT1(1, Baudlist[System_Parameter.BaudIndex[0]].BaudValue);
  84   1              SET_BRT1(2, Baudlist[System_Parameter.BaudIndex[1]].BaudValue);
  85   1              SET_BRT1(3, Baudlist[System_Parameter.BaudIndex[2]].BaudValue);
  86   1              SET_BRT1(4, Baudlist[System_Parameter.BaudIndex[3]].BaudValue);
  87   1      }
  88          
  89          /**
  90           * @brief       密码输入
  91           * @details     
  92           * @param       operation：操作类型
  93           * @param       Password：密码对象
  94           * @retval      当前索引下密码值
  95           */
  96          uint8_t PassWordInput(uint8_t operation, SYSTEM_PARAMETER *Password) //密码输入
  97          {
  98   1              /*解决初始时密码错乱*/
  99   1              if (Password->PSWNext.PassWordbuff[Password->PSWNext.Index] == 0xFF)
 100   1              {
 101   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] = 0;
 102   2              }
 103   1              if (operation == ADD)
 104   1              {
 105   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index]++;
 106   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] %= 10;
 107   2              }
 108   1              else
 109   1              {
 110   2                      if (Password->PSWNext.PassWordbuff[Password->PSWNext.Index] == 0)
 111   2                      {
 112   3                              Password->PSWNext.PassWordbuff[Password->PSWNext.Index] = 10;
 113   3                      }
 114   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index]--;
 115   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] %= 10;
 116   2              }
C51 COMPILER V9.60.0.0   CONTROL                                                           12/21/2021 17:57:20 PAGE 3   

 117   1              return Password->PSWNext.PassWordbuff[Password->PSWNext.Index]; //显示
 118   1      }
 119          
 120          
 121          /**
 122           * @brief       输入密码核对
 123           * @details     
 124           * @param       PasswordA：密码A
 125           * @param       PasswordB：密码B
 126           * @retval      true/false
 127           */
 128          uint8_t PassWordjudge(SYSTEM_PARAMETER PasswordA, SYSTEM_PARAMETER PasswordB) //密码判断
 129          {
 130   1              /*密码正确*/
 131   1              if (!strncmp(PasswordA.PSWNext.PassWordbuff, PasswordB.PSWNext.PassWordbuff, PASSWORDBITS))
 132   1                      return true;
 133   1              else
 134   1                      return false;
 135   1      }
 136          
 137          void PassWordDelete(SYSTEM_PARAMETER *Password)
 138          {
 139   1              memset(Password->PSWNext.PassWordbuff, 0xFF, sizeof(Password->PSWNext.PassWordbuff));
 140   1              Password->PSWNext.Index = 0;
 141   1      }
 142          
 143          void InputOffect(SYSTEM_PARAMETER *Password)
 144          {
 145   1              Password->PSWNext.Index++;
 146   1              if(Password->PSWNext.Index == PASSWORDBITS)
 147   1              {       /*密码输入为有效位数*/
 148   2                      System_Parameter.PSWNext.Bit_Efficient_Flag = true;
 149   2              }
 150   1              
 151   1              Password->PSWNext.Index %= PASSWORDBITS;
 152   1      }
 153          
 154          //void PassWordChange(void)              //密码修改
 155          //{
 156          //
 157          //}
 158          
 159          /*屏保显示页面*/
 160          void ScreensaverUiShow(void)
 161          {
 162   1              clear_screen();
 163   1              /*显示南方电网Logo*/
 164   1              GUI_Lattice(0, 0, 192, 64, START_LOGO);
 165   1      }
 166          
 167          void PassWordInputUIShow(void) //输入密码界面进入显示
 168          {
 169   1              clear_screen();
 170   1              GUI_Lattice(0, 8, 81, 50, Logo); //Logo显示
 171   1              GUI_String(100, 15, "请输入密码", CH_12_12);
 172   1      }
 173          
 174          void PassWordChangeUIShow(void) //修改密码界面进入显示
 175          {
 176   1              // PassWordDelete(&PassWordChange1); //清0数据
 177   1              // PassWordDelete(&PassWordChange2);
 178   1              uint8_t i;
C51 COMPILER V9.60.0.0   CONTROL                                                           12/21/2021 17:57:20 PAGE 4   

 179   1          uint8_t temp[2];
 180   1      
 181   1              clear_screen();
 182   1              /*如果是输入第二次密码*/
 183   1              if (System_Parameter.PSWNext.First_Input_Flag)
 184   1              {
 185   2                      /*保留原来的密码*/
 186   2                      for (i = 0; i < PASSWORDBITS; i++) //显示4位密码
 187   2              {
 188   3                  GUI_String(i * 20 + 100, 18, myitoa(PassWordChange1.PSWNext.PassWordbuff[i], temp, 10), EN_5_8
             -);
 189   3              }
 190   2              GUI_Lattice(175, 16, 16, 12, dot);
 191   2              }
 192   1      
 193   1              GUI_String(15, 15, "请输入新密码", CH_12_12);
 194   1              GUI_String(15, 35, "请确认新密码", CH_12_12);
 195   1      }
 196          
 197          void PlcPowerUIshow(void)
 198          {
 199   1              clear_screen();
 200   1      
 201   1              GUI_String(15, 24, "STOP", EN_5_8);
 202   1              GUI_String(150, 24, "RUN", EN_5_8);
 203   1      
 204   1              if (System_Parameter.PlcState == RUN)
 205   1              {
 206   2                      GUI_Lattice(45, 0, 100, 56, PlcRun);
 207   2              }
 208   1              else
 209   1              {
 210   2                      GUI_Lattice(45, 0, 100, 56, PlcStop);
 211   2              }
 212   1      }
 213          
 214          void CommunicaUIshow(void)
 215          {
 216   1              clear_screen();
 217   1              GUI_Lattice(10, System_Parameter.CommunicationType * 30 + 11, 16, 12, finger);
 218   1      
 219   1              GUI_String(30, 10, "关闭无线模块", CH_12_12);
 220   1              GUI_String(30, 40, "打开无线模块", CH_12_12);
 221   1      }
 222          
 223          // void BaudSettingUIshow(void)
 224          // {
 225          //      // clear_screen();
 226          //      // GUI_String(10, 10, "本地串口", CH_12_12);
 227          //      // GUI_String(105, 13, Baudlist[System_Parameter.BaudIndex].pstring, EN_5_8);
 228          //      // GUI_Lattice(149, 13, 5, 8, IconRight);
 229          //      // GUI_Lattice(97, 13, 5, 8, Iconleft);
 230          
 231          //      // GUI_String(10, 40, "远程串口", CH_12_12);
 232          //      // GUI_String(80, 43, "115200(readonly)", EN_5_8);
 233          // }
 234          
 235          void BaudSettingUI1show(void)
 236          {
 237   1              clear_screen();
 238   1              GUI_String(10, 29, "以太网", CH_12_12);
 239   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[0]].pstring, EN_5_8);
C51 COMPILER V9.60.0.0   CONTROL                                                           12/21/2021 17:57:20 PAGE 5   

 240   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 241   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 242   1      }
 243          
 244          void BaudSettingUI2show(void)
 245          {
 246   1              clear_screen();
 247   1              GUI_String(10, 29, "无线网", CH_12_12);
 248   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[1]].pstring, EN_5_8);
 249   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 250   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 251   1      }
 252          
 253          void BaudSettingUI3show(void)
 254          {
 255   1              clear_screen();
 256   1              GUI_String(10, 29, "扩展网", CH_12_12);
 257   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[2]].pstring, EN_5_8);
 258   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 259   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 260   1      }
 261          
 262          void BaudSettingUI4show(void)
 263          {
 264   1              clear_screen();
 265   1              GUI_String(10, 29, "内部网", CH_12_12);
 266   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[3]].pstring, EN_5_8);
 267   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 268   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 269   1      }
 270          
 271          void ReloadSettingUIshow(void)
 272          {
 273   1              clear_screen();
 274   1              GUI_String(48, 20, "是否恢复出厂设置", CH_12_12);
 275   1              GUI_String(10, 48, "是", CH_12_12);
 276   1              GUI_String(172, 48, "否", CH_12_12);
 277   1      }
 278          
 279          void HotspotSettingUIshow(void)
 280          {
 281   1              clear_screen();
 282   1              GUI_String(10,10,"热点", CH_12_12);
 283   1              GUI_String(115,10,Aplist[System_Parameter.Apstate].pstring,CH_12_12);
 284   1              GUI_Lattice(149,13,5,8,IconRight);
 285   1              GUI_Lattice(97,13,5,8,Iconleft);
 286   1                              
 287   1              GUI_String(10,43,"AP ID",EN_5_8);
 288   1              GUI_String(97,43,AP_ID,EN_5_8); 
 289   1      }
 290          
 291          void WorkModeUIshow(void)
 292          {
 293   1              clear_screen();
 294   1              GUI_String(10,10,"模式", CH_12_12);
 295   1              GUI_String(115,10,Modelist[System_Parameter.WorkMode].pstring,CH_12_12);
 296   1              GUI_Lattice(149,13,5,8,IconRight);
 297   1              GUI_Lattice(97,13,5,8,Iconleft);
 298   1                              
 299   1              GUI_String(10,43,"object",EN_5_8);
 300   1              GUI_String(97,43,Objlist[System_Parameter.CurrentSlave].pstring,EN_5_8);        
 301   1      }
C51 COMPILER V9.60.0.0   CONTROL                                                           12/21/2021 17:57:20 PAGE 6   

 302          
 303          void Mode_Slave(void)
 304          {
 305   1              System_Parameter.WorkMode = SLAVE;
 306   1      }
 307          
 308          void Mode_Master(void)
 309          {
 310   1              System_Parameter.WorkMode = MASTER;
 311   1              /*PLC工作在主站时，默认从站为RS485*/
 312   1              System_Parameter.CurrentSlave = RS485_ID;
 313   1      }
 314          
 315          /**
 316           * @brief       系统数据存储到EEPROM
 317           * @details     存储数据前为了防止中断打断数据的存储，因该关闭全局中断
 318           * @param       None
 319           * @retval      None
 320           */
 321          void ControlSave(void)
 322          {
 323   1              /*计算出当前有效数据的校验码并存储*/
 324   1              System_Parameter.CRC16 = getCrc16(&System_Parameter.PSWNext.PassWordbuff[0], (sizeof(System_Parameter) - 
             -(sizeof(PASSWORDSTRUCT) - 4U) - 2U), 0xffff);
 325   1              
 326   1              CLOSE_GLOBAL_OUTAGE();
 327   1              /*每次写之前必须进行擦除操作：擦除每次按照512B进行(0x00-0x0200)*/
 328   1              IapErase(START_SAVEADDRESS); 
 329   1              IapWrite_Buff(START_SAVEADDRESS, &System_Parameter.PSWNext.PassWordbuff[0], (sizeof(System_Parameter) - (
             -sizeof(PASSWORDSTRUCT) - 4U)));
 330   1              OPEN_GLOBAL_OUTAGE();
 331   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1311    ----
   CONSTANT SIZE    =    268    ----
   XDATA SIZE       =    154      47
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

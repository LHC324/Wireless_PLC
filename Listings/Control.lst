C51 COMPILER V9.60.0.0   CONTROL                                                           03/03/2023 11:28:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CONTROL
OBJECT MODULE PLACED IN .\Objects\Control.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\Control.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include;.\FreeMo
                    -dBus\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\Control.lst) OBJECT(.\Objects\Control.obj)

line level    source

   1          #include "Control.h"
   2          
   3          extern uint16_t getCrc16(const uint8_t *ptr, uint8_t length, uint16_t IniDat);
   4          extern void Uart1SendStr(unsigned char *p, unsigned char length);
   5          //*************************密码变量****************************
   6          
   7          SYSTEM_PARAMETER PassWordI; //输入密码
   8          //默认密码将在校验无误的情况下存到System_Parameter.PSWNext.PassWordbuff
   9          
  10          SYSTEM_PARAMETER PassWordChange1; //修改密码1
  11          SYSTEM_PARAMETER PassWordChange2; //修改密码2
  12          
  13          // PASSWORDSTRUCT PassWordChange1 = {0, false, false, {0}}; //修改密码1
  14          // PASSWORDSTRUCT PassWordChange2 = {0, false, false, {0}}; //修改密码2
  15          //*************************************************************
  16          
  17          /*****************波特率变量*********************************/
  18          BAUDSTRUCT Baudlist[] =
  19          {
  20                          {0, BRT_1T(BAUD_2400),   " 2400 "},
  21                          {1, BRT_1T(BAUD_4800),   " 4800 "},
  22                          {2, BRT_1T(BAUD_9600),   " 9600 "},
  23                          {3, BRT_1T(BAUD_14400),  "14400 "},
  24                          {4, BRT_1T(BAUD_19200),  "19200 "},
  25                          {5, BRT_1T(BAUD_38400),  "38400 "},
  26                          {6, BRT_1T(BAUD_56000),  "56000 "},
  27                          {7, BRT_1T(BAUD_57600),  "57600 "},
  28                          {8, BRT_1T(BAUD_115200), "115200"},
  29                          {9, BRT_1T(BAUD_921600), "921600"},
  30          };
  31          
  32          uint8_t G_BaudList_Size = (sizeof(Baudlist) / sizeof(BAUDSTRUCT));
  33          /************************************************************/
  34          
  35          /*热点设置*/
  36          APSTRUCT Aplist[] =
  37          {
  38                  {"打开", Wifi_Open_Ap},
  39                  {"关闭", Wifi_Close_Ap}
  40          };
  41          uint8_t G_Aplist_Size = (sizeof(Aplist) / sizeof(APSTRUCT));
  42          
  43          /*工作模式设置*/
  44          MODESTRUCT Modelist[] =
  45          {
  46                  {"主机", Mode_Master},
  47                  {"从机", Mode_Slave}
  48          };
  49          uint8_t G_Modelist_Size = (sizeof(Modelist) / sizeof(MODESTRUCT));
  50          
  51          OBJCTSTRUCT Objlist[] = 
  52          {
  53                  {"Ethernet"},
  54                  {"WIFI/4G"},
C51 COMPILER V9.60.0.0   CONTROL                                                           03/03/2023 11:28:22 PAGE 2   

  55                  {"RS485"}
  56          };
  57          uint8_t G_Objlist_Size = (sizeof(Objlist) / sizeof(OBJCTSTRUCT));
  58          
  59          /*通讯协议设置*/
  60          MODESTRUCT Pactlist[] =
  61          {
  62                  {"Other",Set_OtherPact},
  63                  {"PPI_p", Set_PpiPact}
  64          };
  65          uint8_t G_Pactlist_Size = (sizeof(Pactlist) / sizeof(MODESTRUCT));
  66          
  67          void ControlInit(void)
  68          {
  69   1              /*缺省控件类型*/
  70   1              System_Parameter.PSWNext.First_Input_Flag = false;
  71   1              BaudInit();              //串口3波特率初始化
  72   1              PowerInit();     //开关初始化
  73   1              CommunicaInit(); //通信初始化
  74   1              /*初始化临时副本*/
  75   1              SYS_TEMP_PARA.WorkMode = System_Parameter.WorkMode;
  76   1              SYS_TEMP_PARA.Ppistate = System_Parameter.Ppistate;
  77   1              if (SYS_TEMP_PARA.Ppistate == 0)
  78   1              {
  79   2                      Set_OtherPact();
  80   2              }
  81   1              else
  82   1              {
  83   2                      Set_PpiPact();
  84   2              }
  85   1      }
  86          
  87          void CommunicaInit(void)
  88          {       /*默认为本地连接方式*/
  89   1              /*初始连接状态*/
  90   1      //      LTEenable(CommunciaType);
  91   1          Wifi_Enable(System_Parameter.CommunicationType);
  92   1      }
  93          
  94          void PowerInit(void)
  95          {       /*PLC初始运行状态*/
  96   1              RUNKEY = System_Parameter.PlcState; //默认为STOP
  97   1      }
  98          
  99          void BaudInit(void)
 100          {       /*默认波特率为9600*/
 101   1              /*波特率预选索引,操作的是波特率选项界面*/
 102   1              SET_BRT1(1, Baudlist[System_Parameter.BaudIndex[0]].BaudValue);
 103   1              SET_BRT1(2, Baudlist[System_Parameter.BaudIndex[1]].BaudValue);
 104   1              SET_BRT1(3, Baudlist[System_Parameter.BaudIndex[2]].BaudValue);
 105   1              SET_BRT1(4, Baudlist[System_Parameter.BaudIndex[3]].BaudValue);
 106   1      }
 107          
 108          /**
 109           * @brief       密码输入
 110           * @details     
 111           * @param       operation：操作类型
 112           * @param       Password：密码对象
 113           * @retval      当前索引下密码值
 114           */
 115          uint8_t PassWordInput(uint8_t operation, SYSTEM_PARAMETER *Password) //密码输入
 116          {
C51 COMPILER V9.60.0.0   CONTROL                                                           03/03/2023 11:28:22 PAGE 3   

 117   1              /*解决初始时密码错乱*/
 118   1              if (Password->PSWNext.PassWordbuff[Password->PSWNext.Index] == 0xFF)
 119   1              {
 120   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] = 0;
 121   2              }
 122   1              if (operation == ADD)
 123   1              {
 124   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index]++;
 125   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] %= 10;
 126   2              }
 127   1              else
 128   1              {
 129   2                      if (Password->PSWNext.PassWordbuff[Password->PSWNext.Index] == 0)
 130   2                      {
 131   3                              Password->PSWNext.PassWordbuff[Password->PSWNext.Index] = 10;
 132   3                      }
 133   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index]--;
 134   2                      Password->PSWNext.PassWordbuff[Password->PSWNext.Index] %= 10;
 135   2              }
 136   1              return Password->PSWNext.PassWordbuff[Password->PSWNext.Index]; //显示
 137   1      }
 138          
 139          
 140          /**
 141           * @brief       输入密码核对
 142           * @details     
 143           * @param       PasswordA：密码A
 144           * @param       PasswordB：密码B
 145           * @retval      true/false
 146           */
 147          uint8_t PassWordjudge(SYSTEM_PARAMETER PasswordA, SYSTEM_PARAMETER PasswordB) //密码判断
 148          {
 149   1              /*密码正确*/
 150   1              if (!strncmp(PasswordA.PSWNext.PassWordbuff, PasswordB.PSWNext.PassWordbuff, PASSWORDBITS))
 151   1                      return true;
 152   1              else
 153   1                      return false;
 154   1      }
 155          
 156          void PassWordDelete(SYSTEM_PARAMETER *Password)
 157          {
 158   1              memset(Password->PSWNext.PassWordbuff, 0xFF, sizeof(Password->PSWNext.PassWordbuff));
 159   1              Password->PSWNext.Index = 0;
 160   1      }
 161          
 162          void InputOffect(SYSTEM_PARAMETER *Password)
 163          {
 164   1              Password->PSWNext.Index++;
 165   1              if(Password->PSWNext.Index == PASSWORDBITS)
 166   1              {       /*密码输入为有效位数*/
 167   2                      System_Parameter.PSWNext.Bit_Efficient_Flag = true;
 168   2              }
 169   1              
 170   1              Password->PSWNext.Index %= PASSWORDBITS;
 171   1      }
 172          
 173          //void PassWordChange(void)              //密码修改
 174          //{
 175          //
 176          //}
 177          
 178          /*屏保显示页面*/
C51 COMPILER V9.60.0.0   CONTROL                                                           03/03/2023 11:28:22 PAGE 4   

 179          void ScreensaverUiShow(void)
 180          {
 181   1              clear_screen();
 182   1              /*显示南方电网Logo*/
 183   1              GUI_Lattice(0, 0, 192, 64, START_LOGO);
 184   1      }
 185          
 186          void PassWordInputUIShow(void) //输入密码界面进入显示
 187          {
 188   1              clear_screen();
 189   1              GUI_Lattice(0, 8, 81, 50, Logo); //Logo显示
 190   1              GUI_String(100, 15, "请输入密码", CH_12_12);
 191   1      }
 192          
 193          void PassWordChangeUIShow(void) //修改密码界面进入显示
 194          {
 195   1              // PassWordDelete(&PassWordChange1); //清0数据
 196   1              // PassWordDelete(&PassWordChange2);
 197   1              uint8_t i;
 198   1          uint8_t temp[2];
 199   1      
 200   1              clear_screen();
 201   1              /*如果是输入第二次密码*/
 202   1              if (System_Parameter.PSWNext.First_Input_Flag)
 203   1              {
 204   2                      /*保留原来的密码*/
 205   2                      for (i = 0; i < PASSWORDBITS; i++) //显示4位密码
 206   2              {
 207   3                  GUI_String(i * 20 + 100, 18, myitoa(PassWordChange1.PSWNext.PassWordbuff[i], temp, 10), EN_5_8
             -);
 208   3              }
 209   2              GUI_Lattice(175, 16, 16, 12, dot);
 210   2              }
 211   1      
 212   1              GUI_String(15, 15, "请输入新密码", CH_12_12);
 213   1              GUI_String(15, 35, "请确认新密码", CH_12_12);
 214   1      }
 215          
 216          void PlcPowerUIshow(void)
 217          {
 218   1              clear_screen();
 219   1      
 220   1              GUI_String(15, 24, "STOP", EN_5_8);
 221   1              GUI_String(150, 24, "RUN", EN_5_8);
 222   1      
 223   1              if (System_Parameter.PlcState == RUN)
 224   1              {
 225   2                      GUI_Lattice(45, 0, 100, 56, PlcRun);
 226   2              }
 227   1              else
 228   1              {
 229   2                      GUI_Lattice(45, 0, 100, 56, PlcStop);
 230   2              }
 231   1      }
 232          
 233          void CommunicaUIshow(void)
 234          {
 235   1              clear_screen();
 236   1              GUI_Lattice(10, System_Parameter.CommunicationType * 30 + 11, 16, 12, finger);
 237   1      
 238   1              GUI_String(30, 10, "关闭无线模块", CH_12_12);
 239   1              GUI_String(30, 40, "打开无线模块", CH_12_12);
C51 COMPILER V9.60.0.0   CONTROL                                                           03/03/2023 11:28:22 PAGE 5   

 240   1      }
 241          
 242          // void BaudSettingUIshow(void)
 243          // {
 244          //      // clear_screen();
 245          //      // GUI_String(10, 10, "本地串口", CH_12_12);
 246          //      // GUI_String(105, 13, Baudlist[System_Parameter.BaudIndex].pstring, EN_5_8);
 247          //      // GUI_Lattice(149, 13, 5, 8, IconRight);
 248          //      // GUI_Lattice(97, 13, 5, 8, Iconleft);
 249          
 250          //      // GUI_String(10, 40, "远程串口", CH_12_12);
 251          //      // GUI_String(80, 43, "115200(readonly)", EN_5_8);
 252          // }
 253          
 254          void BaudSettingUI1show(void)
 255          {
 256   1              clear_screen();
 257   1              GUI_String(10, 29, "以太网", CH_12_12);
 258   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[0]].pstring, EN_5_8);
 259   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 260   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 261   1      }
 262          
 263          void BaudSettingUI2show(void)
 264          {
 265   1              clear_screen();
 266   1              GUI_String(10, 29, "无线网", CH_12_12);
 267   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[1]].pstring, EN_5_8);
 268   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 269   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 270   1      }
 271          
 272          void BaudSettingUI3show(void)
 273          {
 274   1              clear_screen();
 275   1              GUI_String(10, 29, "扩展网", CH_12_12);
 276   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[2]].pstring, EN_5_8);
 277   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 278   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 279   1      }
 280          
 281          void BaudSettingUI4show(void)
 282          {
 283   1              clear_screen();
 284   1              GUI_String(10, 29, "内部网", CH_12_12);
 285   1              GUI_String(105, 31, Baudlist[System_Parameter.BaudIndex[3]].pstring, EN_5_8);
 286   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 287   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 288   1      }
 289          
 290          void ReloadSettingUIshow(void)
 291          {
 292   1              clear_screen();
 293   1              GUI_String(48, 20, "是否恢复出厂设置", CH_12_12);
 294   1              GUI_String(10, 48, "是", CH_12_12);
 295   1              GUI_String(172, 48, "否", CH_12_12);
 296   1      }
 297          
 298          void HotspotSettingUIshow(void)
 299          {
 300   1              clear_screen();
 301   1              GUI_String(10,10,"热点", CH_12_12);
C51 COMPILER V9.60.0.0   CONTROL                                                           03/03/2023 11:28:22 PAGE 6   

 302   1              GUI_String(115,10,Aplist[System_Parameter.Apstate].pstring,CH_12_12);
 303   1              GUI_Lattice(149,13,5,8,IconRight);
 304   1              GUI_Lattice(97,13,5,8,Iconleft);
 305   1                              
 306   1              GUI_String(10,43,"AP ID",EN_5_8);
 307   1              GUI_String(97,43,AP_ID,EN_5_8); 
 308   1      }
 309          
 310          void WorkModeUIshow(void)
 311          {
 312   1              clear_screen();
 313   1              GUI_String(10,10,"模式", CH_12_12);
 314   1              GUI_String(115,10,Modelist[SYS_TEMP_PARA.WorkMode].pstring,CH_12_12);
 315   1              GUI_Lattice(149,13,5,8,IconRight);
 316   1              GUI_Lattice(97,13,5,8,Iconleft);
 317   1                              
 318   1              GUI_String(5,115,"Master-Object",EN_5_8);
 319   1              GUI_String(120,115,Objlist[System_Parameter.CurrentSlave].pstring,EN_5_8);      
 320   1      }
 321          
 322          void PactUIshow(void)
 323          {
 324   1              clear_screen();
 325   1              GUI_String(5, 29, "扩展网协议", CH_12_12);
 326   1              GUI_String(105, 31, Pactlist[SYS_TEMP_PARA.Ppistate].pstring, EN_5_8);
 327   1              GUI_Lattice(149, 31, 5, 8, IconRight);
 328   1              GUI_Lattice(97, 31, 5, 8, Iconleft);
 329   1      }
 330          
 331          void Mode_Slave(void)
 332          {
 333   1              // System_Parameter.WorkMode = SYS_TEMP_PARA.WorkMode;
 334   1              /*从机模式下使能所有请求主机*/
 335   1              REN = 1;
 336   1              S2CON |= S2REN;
 337   1              S3CON |= S3REN;
 338   1      }
 339          
 340          void Mode_Master(void)
 341          {
 342   1              // System_Parameter.WorkMode = SYS_TEMP_PARA.WorkMode;
 343   1              /*PLC工作在主站时，默认从站为RS485*/
 344   1              System_Parameter.CurrentSlave = RS485_ID;
 345   1              /*主机模式下关闭多余从机*/
 346   1              REN = 0;
 347   1              S2CON &= 0xEF;
 348   1              S3CON &= 0xEF;
 349   1      }
 350          
 351          void Set_OtherPact(void)
 352          {
 353   1              S3CON &= 0x7F;
 354   1              S4CON &= 0x7F;
 355   1      }
 356          
 357          void Set_PpiPact(void)
 358          {
 359   1              S3CON |= 0x80;
 360   1              S4CON |= 0x80;
 361   1      }
 362          
 363          /**
C51 COMPILER V9.60.0.0   CONTROL                                                           03/03/2023 11:28:22 PAGE 7   

 364           * @brief       系统数据存储到EEPROM
 365           * @details     存储数据前为了防止中断打断数据的存储，因该关闭全局中断
 366           * @param       None
 367           * @retval      None
 368           */
 369          void ControlSave(void)
 370          {
 371   1              /*计算出当前有效数据的校验码并存储*/
 372   1              System_Parameter.CRC16 = getCrc16(&System_Parameter.PSWNext.PassWordbuff[0], (sizeof(System_Parameter) - 
             -(sizeof(PASSWORDSTRUCT) - 4U) - 2U), 0xffff);
 373   1              
 374   1              CLOSE_GLOBAL_OUTAGE();
 375   1              /*每次写之前必须进行擦除操作：擦除每次按照512B进行(0x00-0x0200)*/
 376   1              IapErase(START_SAVEADDRESS); 
 377   1              IapWrite_Buff(START_SAVEADDRESS, &System_Parameter.PSWNext.PassWordbuff[0], (sizeof(System_Parameter) - (
             -sizeof(PASSWORDSTRUCT) - 4U)));
 378   1              OPEN_GLOBAL_OUTAGE();
 379   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1428    ----
   CONSTANT SIZE    =    298    ----
   XDATA SIZE       =    170      49
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
